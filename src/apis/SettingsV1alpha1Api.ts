/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.19
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1alpha1PodPreset from '../models/V1alpha1PodPreset'
import V1alpha1PodPresetList from '../models/V1alpha1PodPresetList'

interface CreateNamespacedPodPresetRequest {
  namespace: string

  body: V1alpha1PodPreset

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface DeleteCollectionNamespacedPodPresetRequest {
  namespace: string

  pretty?: string

  _continue?: string

  dryRun?: string

  fieldSelector?: string

  gracePeriodSeconds?: number

  labelSelector?: string

  limit?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number

  body?: V1DeleteOptions
}

interface DeleteNamespacedPodPresetRequest {
  name: string

  namespace: string

  pretty?: string

  dryRun?: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  body?: V1DeleteOptions
}

interface ListNamespacedPodPresetRequest {
  namespace: string

  pretty?: string

  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface ListPodPresetForAllNamespacesRequest {
  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  pretty?: string

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface PatchNamespacedPodPresetRequest {
  name: string

  namespace: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface ReadNamespacedPodPresetRequest {
  name: string

  namespace: string

  pretty?: string

  exact?: boolean

  _export?: boolean
}

interface ReplaceNamespacedPodPresetRequest {
  name: string

  namespace: string

  body: V1alpha1PodPreset

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

/**
 * create a PodPreset
 */
export async function createNamespacedPodPresetRaw(
  requestParameters: CreateNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PodPreset>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodPreset.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a PodPreset
 */
export async function createNamespacedPodPreset(
  requestParameters: CreateNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PodPreset> {
  const response = await createNamespacedPodPresetRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete collection of PodPreset
 */
export async function deleteCollectionNamespacedPodPresetRaw(
  requestParameters: DeleteCollectionNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of PodPreset
 */
export async function deleteCollectionNamespacedPodPreset(
  requestParameters: DeleteCollectionNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionNamespacedPodPresetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a PodPreset
 */
export async function deleteNamespacedPodPresetRaw(
  requestParameters: DeleteNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPodPreset.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a PodPreset
 */
export async function deleteNamespacedPodPreset(
  requestParameters: DeleteNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteNamespacedPodPresetRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind PodPreset
 */
export async function watchListNamespacedPodPreset(
  requestParameters: ListNamespacedPodPresetRequest,
  callback: (event: KubeEvent<ItemType<V1alpha1PodPresetList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1alpha1PodPresetList>>(
    callback,
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind PodPreset
 */
export async function listNamespacedPodPresetRaw(
  requestParameters: ListNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PodPresetList>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind PodPreset
 */
export async function listNamespacedPodPreset(
  requestParameters: ListNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PodPresetList> {
  const response = await listNamespacedPodPresetRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind PodPreset
 */
export async function watchListPodPresetForAllNamespaces(
  requestParameters: ListPodPresetForAllNamespacesRequest,
  callback: (event: KubeEvent<ItemType<V1alpha1PodPresetList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1alpha1PodPresetList>>(
    callback,
    {
      path: `/apis/settings.k8s.io/v1alpha1/podpresets`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind PodPreset
 */
export async function listPodPresetForAllNamespacesRaw(
  requestParameters: ListPodPresetForAllNamespacesRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PodPresetList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/podpresets`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind PodPreset
 */
export async function listPodPresetForAllNamespaces(
  requestParameters: ListPodPresetForAllNamespacesRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PodPresetList> {
  const response = await listPodPresetForAllNamespacesRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update the specified PodPreset
 */
export async function patchNamespacedPodPresetRaw(
  requestParameters: PatchNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PodPreset>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodPreset.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodPreset.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified PodPreset
 */
export async function patchNamespacedPodPreset(
  requestParameters: PatchNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PodPreset> {
  const response = await patchNamespacedPodPresetRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read the specified PodPreset
 */
export async function readNamespacedPodPresetRaw(
  requestParameters: ReadNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PodPreset>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodPreset.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified PodPreset
 */
export async function readNamespacedPodPreset(
  requestParameters: ReadNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PodPreset> {
  const response = await readNamespacedPodPresetRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace the specified PodPreset
 */
export async function replaceNamespacedPodPresetRaw(
  requestParameters: ReplaceNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PodPreset>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodPreset.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodPreset.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodPreset.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified PodPreset
 */
export async function replaceNamespacedPodPreset(
  requestParameters: ReplaceNamespacedPodPresetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PodPreset> {
  const response = await replaceNamespacedPodPresetRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}
