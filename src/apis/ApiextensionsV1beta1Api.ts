// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1beta1CustomResourceDefinition from '../models/V1beta1CustomResourceDefinition'
import V1beta1CustomResourceDefinitionList from '../models/V1beta1CustomResourceDefinitionList'

interface CreateCustomResourceDefinitionRequest {
  body: V1beta1CustomResourceDefinition
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCollectionCustomResourceDefinitionRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteCustomResourceDefinitionRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface ListCustomResourceDefinitionRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchCustomResourceDefinitionRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchCustomResourceDefinitionStatusRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadCustomResourceDefinitionRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadCustomResourceDefinitionStatusRequest {
  name: string
  pretty?: string
}

interface ReplaceCustomResourceDefinitionRequest {
  name: string
  body: V1beta1CustomResourceDefinition
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceCustomResourceDefinitionStatusRequest {
  name: string
  body: V1beta1CustomResourceDefinition
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 * create a CustomResourceDefinition
 */
export async function createCustomResourceDefinitionRaw(
  requestParameters: CreateCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinition>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createCustomResourceDefinition.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a CustomResourceDefinition
 */
export async function createCustomResourceDefinition(
  requestParameters: CreateCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinition> {
  const response = await createCustomResourceDefinitionRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete collection of CustomResourceDefinition
 */
export async function deleteCollectionCustomResourceDefinitionRaw(
  requestParameters: DeleteCollectionCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of CustomResourceDefinition
 */
export async function deleteCollectionCustomResourceDefinition(
  requestParameters: DeleteCollectionCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionCustomResourceDefinitionRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a CustomResourceDefinition
 */
export async function deleteCustomResourceDefinitionRaw(
  requestParameters: DeleteCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteCustomResourceDefinition.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a CustomResourceDefinition
 */
export async function deleteCustomResourceDefinition(
  requestParameters: DeleteCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCustomResourceDefinitionRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind CustomResourceDefinition
 */
export async function watchListCustomResourceDefinition(
  requestParameters: ListCustomResourceDefinitionRequest,
  callback: (event: KubeEvent<ItemType<V1beta1CustomResourceDefinitionList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1beta1CustomResourceDefinitionList>>(
    callback,
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind CustomResourceDefinition
 */
export async function listCustomResourceDefinitionRaw(
  requestParameters: ListCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinitionList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind CustomResourceDefinition
 */
export async function listCustomResourceDefinition(
  requestParameters: ListCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinitionList> {
  const response = await listCustomResourceDefinitionRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update the specified CustomResourceDefinition
 */
export async function patchCustomResourceDefinitionRaw(
  requestParameters: PatchCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinition>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchCustomResourceDefinition.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchCustomResourceDefinition.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified CustomResourceDefinition
 */
export async function patchCustomResourceDefinition(
  requestParameters: PatchCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinition> {
  const response = await patchCustomResourceDefinitionRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update status of the specified CustomResourceDefinition
 */
export async function patchCustomResourceDefinitionStatusRaw(
  requestParameters: PatchCustomResourceDefinitionStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinition>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchCustomResourceDefinitionStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchCustomResourceDefinitionStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified CustomResourceDefinition
 */
export async function patchCustomResourceDefinitionStatus(
  requestParameters: PatchCustomResourceDefinitionStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinition> {
  const response = await patchCustomResourceDefinitionStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read the specified CustomResourceDefinition
 */
export async function readCustomResourceDefinitionRaw(
  requestParameters: ReadCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinition>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readCustomResourceDefinition.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified CustomResourceDefinition
 */
export async function readCustomResourceDefinition(
  requestParameters: ReadCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinition> {
  const response = await readCustomResourceDefinitionRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read status of the specified CustomResourceDefinition
 */
export async function readCustomResourceDefinitionStatusRaw(
  requestParameters: ReadCustomResourceDefinitionStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinition>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readCustomResourceDefinitionStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified CustomResourceDefinition
 */
export async function readCustomResourceDefinitionStatus(
  requestParameters: ReadCustomResourceDefinitionStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinition> {
  const response = await readCustomResourceDefinitionStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified CustomResourceDefinition
 */
export async function replaceCustomResourceDefinitionRaw(
  requestParameters: ReplaceCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinition>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceCustomResourceDefinition.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceCustomResourceDefinition.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified CustomResourceDefinition
 */
export async function replaceCustomResourceDefinition(
  requestParameters: ReplaceCustomResourceDefinitionRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinition> {
  const response = await replaceCustomResourceDefinitionRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace status of the specified CustomResourceDefinition
 */
export async function replaceCustomResourceDefinitionStatusRaw(
  requestParameters: ReplaceCustomResourceDefinitionStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CustomResourceDefinition>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceCustomResourceDefinitionStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceCustomResourceDefinitionStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the specified CustomResourceDefinition
 */
export async function replaceCustomResourceDefinitionStatus(
  requestParameters: ReplaceCustomResourceDefinitionStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CustomResourceDefinition> {
  const response = await replaceCustomResourceDefinitionStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}
