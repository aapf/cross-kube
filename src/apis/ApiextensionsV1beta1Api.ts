// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1beta1CustomResourceDefinition from '../models/V1beta1CustomResourceDefinition'
import V1beta1CustomResourceDefinitionList from '../models/V1beta1CustomResourceDefinitionList'

interface CreateCustomResourceDefinitionRequest {
  body: V1beta1CustomResourceDefinition
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCollectionCustomResourceDefinitionRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteCustomResourceDefinitionRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface ListCustomResourceDefinitionRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchCustomResourceDefinitionRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchCustomResourceDefinitionStatusRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadCustomResourceDefinitionRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadCustomResourceDefinitionStatusRequest {
  name: string
  pretty?: string
}

interface ReplaceCustomResourceDefinitionRequest {
  name: string
  body: V1beta1CustomResourceDefinition
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceCustomResourceDefinitionStatusRequest {
  name: string
  body: V1beta1CustomResourceDefinition
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 *
 */
export default class ApiextensionsV1beta1Api extends runtime.BaseAPI {
  /**
   * create a CustomResourceDefinition
   */
  async createCustomResourceDefinitionRaw(
    requestParameters: CreateCustomResourceDefinitionRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinition>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createCustomResourceDefinition.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a CustomResourceDefinition
   */
  async createCustomResourceDefinition(
    requestParameters: CreateCustomResourceDefinitionRequest
  ): Promise<V1beta1CustomResourceDefinition> {
    const response = await this.createCustomResourceDefinitionRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete collection of CustomResourceDefinition
   */
  async deleteCollectionCustomResourceDefinitionRaw(
    requestParameters: DeleteCollectionCustomResourceDefinitionRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete collection of CustomResourceDefinition
   */
  async deleteCollectionCustomResourceDefinition(
    requestParameters: DeleteCollectionCustomResourceDefinitionRequest
  ): Promise<V1Status> {
    const response = await this.deleteCollectionCustomResourceDefinitionRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete a CustomResourceDefinition
   */
  async deleteCustomResourceDefinitionRaw(
    requestParameters: DeleteCustomResourceDefinitionRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deleteCustomResourceDefinition.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete a CustomResourceDefinition
   */
  async deleteCustomResourceDefinition(
    requestParameters: DeleteCustomResourceDefinitionRequest
  ): Promise<V1Status> {
    const response = await this.deleteCustomResourceDefinitionRaw(requestParameters)
    return await response.value()
  }

  /**
   * get available resources
   */
  async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * get available resources
   */
  async getAPIResources(): Promise<V1APIResourceList> {
    const response = await this.getAPIResourcesRaw()
    return await response.value()
  }

  /**
   * list or watch objects of kind CustomResourceDefinition
   */
  async watchListCustomResourceDefinition(
    requestParameters: ListCustomResourceDefinitionRequest,
    callback: (
      event: runtime.KubeEvent<runtime.ItemType<V1beta1CustomResourceDefinitionList>>
    ) => void,
    signal?: AbortSignal
  ): Promise<void> {
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<V1beta1CustomResourceDefinitionList>>(
      {
        path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind CustomResourceDefinition
   */
  async listCustomResourceDefinitionRaw(
    requestParameters: ListCustomResourceDefinitionRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinitionList>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind CustomResourceDefinition
   */
  async listCustomResourceDefinition(
    requestParameters: ListCustomResourceDefinitionRequest
  ): Promise<V1beta1CustomResourceDefinitionList> {
    const response = await this.listCustomResourceDefinitionRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update the specified CustomResourceDefinition
   */
  async patchCustomResourceDefinitionRaw(
    requestParameters: PatchCustomResourceDefinitionRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinition>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchCustomResourceDefinition.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchCustomResourceDefinition.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update the specified CustomResourceDefinition
   */
  async patchCustomResourceDefinition(
    requestParameters: PatchCustomResourceDefinitionRequest
  ): Promise<V1beta1CustomResourceDefinition> {
    const response = await this.patchCustomResourceDefinitionRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update status of the specified CustomResourceDefinition
   */
  async patchCustomResourceDefinitionStatusRaw(
    requestParameters: PatchCustomResourceDefinitionStatusRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinition>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchCustomResourceDefinitionStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchCustomResourceDefinitionStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update status of the specified CustomResourceDefinition
   */
  async patchCustomResourceDefinitionStatus(
    requestParameters: PatchCustomResourceDefinitionStatusRequest
  ): Promise<V1beta1CustomResourceDefinition> {
    const response = await this.patchCustomResourceDefinitionStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * read the specified CustomResourceDefinition
   */
  async readCustomResourceDefinitionRaw(
    requestParameters: ReadCustomResourceDefinitionRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinition>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readCustomResourceDefinition.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.exact !== undefined) {
      queryParameters['exact'] = requestParameters.exact
    }
    if (requestParameters._export !== undefined) {
      queryParameters['export'] = requestParameters._export
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read the specified CustomResourceDefinition
   */
  async readCustomResourceDefinition(
    requestParameters: ReadCustomResourceDefinitionRequest
  ): Promise<V1beta1CustomResourceDefinition> {
    const response = await this.readCustomResourceDefinitionRaw(requestParameters)
    return await response.value()
  }

  /**
   * read status of the specified CustomResourceDefinition
   */
  async readCustomResourceDefinitionStatusRaw(
    requestParameters: ReadCustomResourceDefinitionStatusRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinition>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readCustomResourceDefinitionStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read status of the specified CustomResourceDefinition
   */
  async readCustomResourceDefinitionStatus(
    requestParameters: ReadCustomResourceDefinitionStatusRequest
  ): Promise<V1beta1CustomResourceDefinition> {
    const response = await this.readCustomResourceDefinitionStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified CustomResourceDefinition
   */
  async replaceCustomResourceDefinitionRaw(
    requestParameters: ReplaceCustomResourceDefinitionRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinition>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceCustomResourceDefinition.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceCustomResourceDefinition.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified CustomResourceDefinition
   */
  async replaceCustomResourceDefinition(
    requestParameters: ReplaceCustomResourceDefinitionRequest
  ): Promise<V1beta1CustomResourceDefinition> {
    const response = await this.replaceCustomResourceDefinitionRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace status of the specified CustomResourceDefinition
   */
  async replaceCustomResourceDefinitionStatusRaw(
    requestParameters: ReplaceCustomResourceDefinitionStatusRequest
  ): Promise<runtime.ApiResponse<V1beta1CustomResourceDefinition>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceCustomResourceDefinitionStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceCustomResourceDefinitionStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace status of the specified CustomResourceDefinition
   */
  async replaceCustomResourceDefinitionStatus(
    requestParameters: ReplaceCustomResourceDefinitionStatusRequest
  ): Promise<V1beta1CustomResourceDefinition> {
    const response = await this.replaceCustomResourceDefinitionStatusRaw(requestParameters)
    return await response.value()
  }
}
