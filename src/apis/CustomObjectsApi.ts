// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import V1DeleteOptions from '../models/V1DeleteOptions'

interface CreateClusterCustomObjectRequest {
  group: string
  version: string
  plural: string
  body: object
  pretty?: string
}

interface CreateNamespacedCustomObjectRequest {
  group: string
  version: string
  namespace: string
  plural: string
  body: object
  pretty?: string
}

interface DeleteClusterCustomObjectRequest {
  group: string
  version: string
  plural: string
  name: string
  body: V1DeleteOptions
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
}

interface DeleteNamespacedCustomObjectRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
  body: V1DeleteOptions
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
}

interface GetClusterCustomObjectRequest {
  group: string
  version: string
  plural: string
  name: string
}

interface GetClusterCustomObjectScaleRequest {
  group: string
  version: string
  plural: string
  name: string
}

interface GetClusterCustomObjectStatusRequest {
  group: string
  version: string
  plural: string
  name: string
}

interface GetNamespacedCustomObjectRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
}

interface GetNamespacedCustomObjectScaleRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
}

interface GetNamespacedCustomObjectStatusRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
}

interface ListClusterCustomObjectRequest {
  group: string
  version: string
  plural: string
  pretty?: string
  fieldSelector?: string
  labelSelector?: string
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListNamespacedCustomObjectRequest {
  group: string
  version: string
  namespace: string
  plural: string
  pretty?: string
  fieldSelector?: string
  labelSelector?: string
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchClusterCustomObjectRequest {
  group: string
  version: string
  plural: string
  name: string
  body: object
}

interface PatchClusterCustomObjectScaleRequest {
  group: string
  version: string
  plural: string
  name: string
  body: object
}

interface PatchClusterCustomObjectStatusRequest {
  group: string
  version: string
  plural: string
  name: string
  body: object
}

interface PatchNamespacedCustomObjectRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
  body: object
}

interface PatchNamespacedCustomObjectScaleRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
  body: object
}

interface PatchNamespacedCustomObjectStatusRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
  body: object
}

interface ReplaceClusterCustomObjectRequest {
  group: string
  version: string
  plural: string
  name: string
  body: object
}

interface ReplaceClusterCustomObjectScaleRequest {
  group: string
  version: string
  plural: string
  name: string
  body: object
}

interface ReplaceClusterCustomObjectStatusRequest {
  group: string
  version: string
  plural: string
  name: string
  body: object
}

interface ReplaceNamespacedCustomObjectRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
  body: object
}

interface ReplaceNamespacedCustomObjectScaleRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
  body: object
}

interface ReplaceNamespacedCustomObjectStatusRequest {
  group: string
  version: string
  namespace: string
  plural: string
  name: string
  body: object
}

/**
 *
 */
export default class CustomObjectsApi extends runtime.BaseAPI {
  /**
   * Creates a cluster scoped Custom object
   */
  async createClusterCustomObjectRaw(
    requestParameters: CreateClusterCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling createClusterCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling createClusterCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling createClusterCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createClusterCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Creates a cluster scoped Custom object
   */
  async createClusterCustomObject(
    requestParameters: CreateClusterCustomObjectRequest
  ): Promise<object> {
    const response = await this.createClusterCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * Creates a namespace scoped Custom object
   */
  async createNamespacedCustomObjectRaw(
    requestParameters: CreateNamespacedCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling createNamespacedCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling createNamespacedCustomObject.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling createNamespacedCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createNamespacedCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Creates a namespace scoped Custom object
   */
  async createNamespacedCustomObject(
    requestParameters: CreateNamespacedCustomObjectRequest
  ): Promise<object> {
    const response = await this.createNamespacedCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * Deletes the specified cluster scoped custom object
   */
  async deleteClusterCustomObjectRaw(
    requestParameters: DeleteClusterCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling deleteClusterCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling deleteClusterCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling deleteClusterCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deleteClusterCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling deleteClusterCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Deletes the specified cluster scoped custom object
   */
  async deleteClusterCustomObject(
    requestParameters: DeleteClusterCustomObjectRequest
  ): Promise<object> {
    const response = await this.deleteClusterCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * Deletes the specified namespace scoped custom object
   */
  async deleteNamespacedCustomObjectRaw(
    requestParameters: DeleteNamespacedCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling deleteNamespacedCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling deleteNamespacedCustomObject.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling deleteNamespacedCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling deleteNamespacedCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Deletes the specified namespace scoped custom object
   */
  async deleteNamespacedCustomObject(
    requestParameters: DeleteNamespacedCustomObjectRequest
  ): Promise<object> {
    const response = await this.deleteNamespacedCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * Returns a cluster scoped custom object
   */
  async getClusterCustomObjectRaw(
    requestParameters: GetClusterCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling getClusterCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling getClusterCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling getClusterCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Returns a cluster scoped custom object
   */
  async getClusterCustomObject(requestParameters: GetClusterCustomObjectRequest): Promise<object> {
    const response = await this.getClusterCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * read scale of the specified custom object
   */
  async getClusterCustomObjectScaleRaw(
    requestParameters: GetClusterCustomObjectScaleRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling getClusterCustomObjectScale.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling getClusterCustomObjectScale.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObjectScale.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling getClusterCustomObjectScale.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read scale of the specified custom object
   */
  async getClusterCustomObjectScale(
    requestParameters: GetClusterCustomObjectScaleRequest
  ): Promise<object> {
    const response = await this.getClusterCustomObjectScaleRaw(requestParameters)
    return await response.value()
  }

  /**
   * read status of the specified cluster scoped custom object
   */
  async getClusterCustomObjectStatusRaw(
    requestParameters: GetClusterCustomObjectStatusRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling getClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling getClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling getClusterCustomObjectStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read status of the specified cluster scoped custom object
   */
  async getClusterCustomObjectStatus(
    requestParameters: GetClusterCustomObjectStatusRequest
  ): Promise<object> {
    const response = await this.getClusterCustomObjectStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * Returns a namespace scoped custom object
   */
  async getNamespacedCustomObjectRaw(
    requestParameters: GetNamespacedCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObject.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Returns a namespace scoped custom object
   */
  async getNamespacedCustomObject(
    requestParameters: GetNamespacedCustomObjectRequest
  ): Promise<object> {
    const response = await this.getNamespacedCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * read scale of the specified namespace scoped custom object
   */
  async getNamespacedCustomObjectScaleRaw(
    requestParameters: GetNamespacedCustomObjectScaleRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObjectScale.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read scale of the specified namespace scoped custom object
   */
  async getNamespacedCustomObjectScale(
    requestParameters: GetNamespacedCustomObjectScaleRequest
  ): Promise<object> {
    const response = await this.getNamespacedCustomObjectScaleRaw(requestParameters)
    return await response.value()
  }

  /**
   * read status of the specified namespace scoped custom object
   */
  async getNamespacedCustomObjectStatusRaw(
    requestParameters: GetNamespacedCustomObjectStatusRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObjectStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read status of the specified namespace scoped custom object
   */
  async getNamespacedCustomObjectStatus(
    requestParameters: GetNamespacedCustomObjectStatusRequest
  ): Promise<object> {
    const response = await this.getNamespacedCustomObjectStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * list or watch cluster scoped custom objects
   */
  async watchListClusterCustomObject(
    requestParameters: ListClusterCustomObjectRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<object>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling listClusterCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling listClusterCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling listClusterCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<object>>(
      {
        path: `/apis/{group}/{version}/{plural}`
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
          .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
          .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch cluster scoped custom objects
   */
  async listClusterCustomObjectRaw(
    requestParameters: ListClusterCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling listClusterCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling listClusterCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling listClusterCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch cluster scoped custom objects
   */
  async listClusterCustomObject(
    requestParameters: ListClusterCustomObjectRequest
  ): Promise<object> {
    const response = await this.listClusterCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * list or watch namespace scoped custom objects
   */
  async watchListNamespacedCustomObject(
    requestParameters: ListNamespacedCustomObjectRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<object>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<object>>(
      {
        path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
          .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
          .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch namespace scoped custom objects
   */
  async listNamespacedCustomObjectRaw(
    requestParameters: ListNamespacedCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling listNamespacedCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch namespace scoped custom objects
   */
  async listNamespacedCustomObject(
    requestParameters: ListNamespacedCustomObjectRequest
  ): Promise<object> {
    const response = await this.listNamespacedCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * patch the specified cluster scoped custom object
   */
  async patchClusterCustomObjectRaw(
    requestParameters: PatchClusterCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * patch the specified cluster scoped custom object
   */
  async patchClusterCustomObject(
    requestParameters: PatchClusterCustomObjectRequest
  ): Promise<object> {
    const response = await this.patchClusterCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update scale of the specified cluster scoped custom object
   */
  async patchClusterCustomObjectScaleRaw(
    requestParameters: PatchClusterCustomObjectScaleRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObjectScale.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObjectScale.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObjectScale.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObjectScale.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObjectScale.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update scale of the specified cluster scoped custom object
   */
  async patchClusterCustomObjectScale(
    requestParameters: PatchClusterCustomObjectScaleRequest
  ): Promise<object> {
    const response = await this.patchClusterCustomObjectScaleRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update status of the specified cluster scoped custom object
   */
  async patchClusterCustomObjectStatusRaw(
    requestParameters: PatchClusterCustomObjectStatusRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObjectStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update status of the specified cluster scoped custom object
   */
  async patchClusterCustomObjectStatus(
    requestParameters: PatchClusterCustomObjectStatusRequest
  ): Promise<object> {
    const response = await this.patchClusterCustomObjectStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * patch the specified namespace scoped custom object
   */
  async patchNamespacedCustomObjectRaw(
    requestParameters: PatchNamespacedCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObject.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * patch the specified namespace scoped custom object
   */
  async patchNamespacedCustomObject(
    requestParameters: PatchNamespacedCustomObjectRequest
  ): Promise<object> {
    const response = await this.patchNamespacedCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update scale of the specified namespace scoped custom object
   */
  async patchNamespacedCustomObjectScaleRaw(
    requestParameters: PatchNamespacedCustomObjectScaleRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObjectScale.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update scale of the specified namespace scoped custom object
   */
  async patchNamespacedCustomObjectScale(
    requestParameters: PatchNamespacedCustomObjectScaleRequest
  ): Promise<object> {
    const response = await this.patchNamespacedCustomObjectScaleRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update status of the specified namespace scoped custom object
   */
  async patchNamespacedCustomObjectStatusRaw(
    requestParameters: PatchNamespacedCustomObjectStatusRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObjectStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update status of the specified namespace scoped custom object
   */
  async patchNamespacedCustomObjectStatus(
    requestParameters: PatchNamespacedCustomObjectStatusRequest
  ): Promise<object> {
    const response = await this.patchNamespacedCustomObjectStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified cluster scoped custom object
   */
  async replaceClusterCustomObjectRaw(
    requestParameters: ReplaceClusterCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified cluster scoped custom object
   */
  async replaceClusterCustomObject(
    requestParameters: ReplaceClusterCustomObjectRequest
  ): Promise<object> {
    const response = await this.replaceClusterCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace scale of the specified cluster scoped custom object
   */
  async replaceClusterCustomObjectScaleRaw(
    requestParameters: ReplaceClusterCustomObjectScaleRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObjectScale.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObjectScale.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObjectScale.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObjectScale.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObjectScale.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace scale of the specified cluster scoped custom object
   */
  async replaceClusterCustomObjectScale(
    requestParameters: ReplaceClusterCustomObjectScaleRequest
  ): Promise<object> {
    const response = await this.replaceClusterCustomObjectScaleRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace status of the cluster scoped specified custom object
   */
  async replaceClusterCustomObjectStatusRaw(
    requestParameters: ReplaceClusterCustomObjectStatusRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObjectStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObjectStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace status of the cluster scoped specified custom object
   */
  async replaceClusterCustomObjectStatus(
    requestParameters: ReplaceClusterCustomObjectStatusRequest
  ): Promise<object> {
    const response = await this.replaceClusterCustomObjectStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified namespace scoped custom object
   */
  async replaceNamespacedCustomObjectRaw(
    requestParameters: ReplaceNamespacedCustomObjectRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObject.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObject.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObject.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObject.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObject.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObject.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified namespace scoped custom object
   */
  async replaceNamespacedCustomObject(
    requestParameters: ReplaceNamespacedCustomObjectRequest
  ): Promise<object> {
    const response = await this.replaceNamespacedCustomObjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace scale of the specified namespace scoped custom object
   */
  async replaceNamespacedCustomObjectScaleRaw(
    requestParameters: ReplaceNamespacedCustomObjectScaleRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObjectScale.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObjectScale.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace scale of the specified namespace scoped custom object
   */
  async replaceNamespacedCustomObjectScale(
    requestParameters: ReplaceNamespacedCustomObjectScaleRequest
  ): Promise<object> {
    const response = await this.replaceNamespacedCustomObjectScaleRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace status of the specified namespace scoped custom object
   */
  async replaceNamespacedCustomObjectStatusRaw(
    requestParameters: ReplaceNamespacedCustomObjectStatusRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new Error(
        'Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.version === null || requestParameters.version === undefined) {
      throw new Error(
        'Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.plural === null || requestParameters.plural === undefined) {
      throw new Error(
        'Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObjectStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObjectStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace status of the specified namespace scoped custom object
   */
  async replaceNamespacedCustomObjectStatus(
    requestParameters: ReplaceNamespacedCustomObjectStatusRequest
  ): Promise<object> {
    const response = await this.replaceNamespacedCustomObjectStatusRaw(requestParameters)
    return await response.value()
  }
}
