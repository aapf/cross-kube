/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.19
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1DeleteOptions from '../models/V1DeleteOptions'

interface CreateClusterCustomObjectRequest {
  group: string

  version: string

  plural: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface CreateNamespacedCustomObjectRequest {
  group: string

  version: string

  namespace: string

  plural: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface DeleteClusterCustomObjectRequest {
  group: string

  version: string

  plural: string

  name: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  dryRun?: string

  body?: V1DeleteOptions
}

interface DeleteCollectionClusterCustomObjectRequest {
  group: string

  version: string

  plural: string

  pretty?: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  dryRun?: string

  body?: V1DeleteOptions
}

interface DeleteCollectionNamespacedCustomObjectRequest {
  group: string

  version: string

  namespace: string

  plural: string

  pretty?: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  dryRun?: string

  body?: V1DeleteOptions
}

interface DeleteNamespacedCustomObjectRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  dryRun?: string

  body?: V1DeleteOptions
}

interface GetClusterCustomObjectRequest {
  group: string

  version: string

  plural: string

  name: string
}

interface GetClusterCustomObjectScaleRequest {
  group: string

  version: string

  plural: string

  name: string
}

interface GetClusterCustomObjectStatusRequest {
  group: string

  version: string

  plural: string

  name: string
}

interface GetNamespacedCustomObjectRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string
}

interface GetNamespacedCustomObjectScaleRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string
}

interface GetNamespacedCustomObjectStatusRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string
}

interface ListClusterCustomObjectRequest {
  group: string

  version: string

  plural: string

  pretty?: string

  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface ListNamespacedCustomObjectRequest {
  group: string

  version: string

  namespace: string

  plural: string

  pretty?: string

  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface PatchClusterCustomObjectRequest {
  group: string

  version: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchClusterCustomObjectScaleRequest {
  group: string

  version: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchClusterCustomObjectStatusRequest {
  group: string

  version: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchNamespacedCustomObjectRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchNamespacedCustomObjectScaleRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchNamespacedCustomObjectStatusRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface ReplaceClusterCustomObjectRequest {
  group: string

  version: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string
}

interface ReplaceClusterCustomObjectScaleRequest {
  group: string

  version: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string
}

interface ReplaceClusterCustomObjectStatusRequest {
  group: string

  version: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string
}

interface ReplaceNamespacedCustomObjectRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string
}

interface ReplaceNamespacedCustomObjectScaleRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string
}

interface ReplaceNamespacedCustomObjectStatusRequest {
  group: string

  version: string

  namespace: string

  plural: string

  name: string

  body: object

  dryRun?: string

  fieldManager?: string
}

/**
 * Creates a cluster scoped Custom object
 */
export async function createClusterCustomObjectRaw(
  requestParameters: CreateClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling createClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling createClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling createClusterCustomObject.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Creates a cluster scoped Custom object
 */
export async function createClusterCustomObject(
  requestParameters: CreateClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await createClusterCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * Creates a namespace scoped Custom object
 */
export async function createNamespacedCustomObjectRaw(
  requestParameters: CreateNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling createNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling createNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling createNamespacedCustomObject.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Creates a namespace scoped Custom object
 */
export async function createNamespacedCustomObject(
  requestParameters: CreateNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await createNamespacedCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * Deletes the specified cluster scoped custom object
 */
export async function deleteClusterCustomObjectRaw(
  requestParameters: DeleteClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling deleteClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling deleteClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling deleteClusterCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Deletes the specified cluster scoped custom object
 */
export async function deleteClusterCustomObject(
  requestParameters: DeleteClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await deleteClusterCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * Delete collection of cluster scoped custom objects
 */
export async function deleteCollectionClusterCustomObjectRaw(
  requestParameters: DeleteCollectionClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling deleteCollectionClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling deleteCollectionClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling deleteCollectionClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Delete collection of cluster scoped custom objects
 */
export async function deleteCollectionClusterCustomObject(
  requestParameters: DeleteCollectionClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await deleteCollectionClusterCustomObjectRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * Delete collection of namespace scoped custom objects
 */
export async function deleteCollectionNamespacedCustomObjectRaw(
  requestParameters: DeleteCollectionNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling deleteCollectionNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling deleteCollectionNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling deleteCollectionNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Delete collection of namespace scoped custom objects
 */
export async function deleteCollectionNamespacedCustomObject(
  requestParameters: DeleteCollectionNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await deleteCollectionNamespacedCustomObjectRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * Deletes the specified namespace scoped custom object
 */
export async function deleteNamespacedCustomObjectRaw(
  requestParameters: DeleteNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling deleteNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling deleteNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling deleteNamespacedCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Deletes the specified namespace scoped custom object
 */
export async function deleteNamespacedCustomObject(
  requestParameters: DeleteNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await deleteNamespacedCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * Returns a cluster scoped custom object
 */
export async function getClusterCustomObjectRaw(
  requestParameters: GetClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling getClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling getClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling getClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Returns a cluster scoped custom object
 */
export async function getClusterCustomObject(
  requestParameters: GetClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await getClusterCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read scale of the specified custom object
 */
export async function getClusterCustomObjectScaleRaw(
  requestParameters: GetClusterCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling getClusterCustomObjectScale.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling getClusterCustomObjectScale.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObjectScale.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling getClusterCustomObjectScale.'
    )
  }
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read scale of the specified custom object
 */
export async function getClusterCustomObjectScale(
  requestParameters: GetClusterCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await getClusterCustomObjectScaleRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read status of the specified cluster scoped custom object
 */
export async function getClusterCustomObjectStatusRaw(
  requestParameters: GetClusterCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling getClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling getClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling getClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling getClusterCustomObjectStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified cluster scoped custom object
 */
export async function getClusterCustomObjectStatus(
  requestParameters: GetClusterCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await getClusterCustomObjectStatusRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * Returns a namespace scoped custom object
 */
export async function getNamespacedCustomObjectRaw(
  requestParameters: GetNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * Returns a namespace scoped custom object
 */
export async function getNamespacedCustomObject(
  requestParameters: GetNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await getNamespacedCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read scale of the specified namespace scoped custom object
 */
export async function getNamespacedCustomObjectScaleRaw(
  requestParameters: GetNamespacedCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObjectScale.'
    )
  }
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read scale of the specified namespace scoped custom object
 */
export async function getNamespacedCustomObjectScale(
  requestParameters: GetNamespacedCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await getNamespacedCustomObjectScaleRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read status of the specified namespace scoped custom object
 */
export async function getNamespacedCustomObjectStatusRaw(
  requestParameters: GetNamespacedCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling getNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling getNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling getNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling getNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling getNamespacedCustomObjectStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified namespace scoped custom object
 */
export async function getNamespacedCustomObjectStatus(
  requestParameters: GetNamespacedCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await getNamespacedCustomObjectStatusRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * list or watch cluster scoped custom objects
 */
export async function watchListClusterCustomObject(
  requestParameters: ListClusterCustomObjectRequest,
  callback: (event: KubeEvent<ItemType<object>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling listClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling listClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling listClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<object>>(
    callback,
    {
      path: `/apis/{group}/{version}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch cluster scoped custom objects
 */
export async function listClusterCustomObjectRaw(
  requestParameters: ListClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling listClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling listClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling listClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch cluster scoped custom objects
 */
export async function listClusterCustomObject(
  requestParameters: ListClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await listClusterCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * list or watch namespace scoped custom objects
 */
export async function watchListNamespacedCustomObject(
  requestParameters: ListNamespacedCustomObjectRequest,
  callback: (event: KubeEvent<ItemType<object>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<object>>(
    callback,
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch namespace scoped custom objects
 */
export async function listNamespacedCustomObjectRaw(
  requestParameters: ListNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling listNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch namespace scoped custom objects
 */
export async function listNamespacedCustomObject(
  requestParameters: ListNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await listNamespacedCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * patch the specified cluster scoped custom object
 */
export async function patchClusterCustomObjectRaw(
  requestParameters: PatchClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObject.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * patch the specified cluster scoped custom object
 */
export async function patchClusterCustomObject(
  requestParameters: PatchClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await patchClusterCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update scale of the specified cluster scoped custom object
 */
export async function patchClusterCustomObjectScaleRaw(
  requestParameters: PatchClusterCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObjectScale.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObjectScale.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObjectScale.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObjectScale.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObjectScale.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update scale of the specified cluster scoped custom object
 */
export async function patchClusterCustomObjectScale(
  requestParameters: PatchClusterCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await patchClusterCustomObjectScaleRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update status of the specified cluster scoped custom object
 */
export async function patchClusterCustomObjectStatusRaw(
  requestParameters: PatchClusterCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling patchClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling patchClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling patchClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchClusterCustomObjectStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified cluster scoped custom object
 */
export async function patchClusterCustomObjectStatus(
  requestParameters: PatchClusterCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await patchClusterCustomObjectStatusRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * patch the specified namespace scoped custom object
 */
export async function patchNamespacedCustomObjectRaw(
  requestParameters: PatchNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObject.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * patch the specified namespace scoped custom object
 */
export async function patchNamespacedCustomObject(
  requestParameters: PatchNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await patchNamespacedCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update scale of the specified namespace scoped custom object
 */
export async function patchNamespacedCustomObjectScaleRaw(
  requestParameters: PatchNamespacedCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObjectScale.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update scale of the specified namespace scoped custom object
 */
export async function patchNamespacedCustomObjectScale(
  requestParameters: PatchNamespacedCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await patchNamespacedCustomObjectScaleRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update status of the specified namespace scoped custom object
 */
export async function patchNamespacedCustomObjectStatusRaw(
  requestParameters: PatchNamespacedCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling patchNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling patchNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling patchNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCustomObjectStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified namespace scoped custom object
 */
export async function patchNamespacedCustomObjectStatus(
  requestParameters: PatchNamespacedCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await patchNamespacedCustomObjectStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified cluster scoped custom object
 */
export async function replaceClusterCustomObjectRaw(
  requestParameters: ReplaceClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObject.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified cluster scoped custom object
 */
export async function replaceClusterCustomObject(
  requestParameters: ReplaceClusterCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await replaceClusterCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace scale of the specified cluster scoped custom object
 */
export async function replaceClusterCustomObjectScaleRaw(
  requestParameters: ReplaceClusterCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObjectScale.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObjectScale.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObjectScale.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObjectScale.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObjectScale.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace scale of the specified cluster scoped custom object
 */
export async function replaceClusterCustomObjectScale(
  requestParameters: ReplaceClusterCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await replaceClusterCustomObjectScaleRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace status of the cluster scoped specified custom object
 */
export async function replaceClusterCustomObjectStatusRaw(
  requestParameters: ReplaceClusterCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling replaceClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling replaceClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling replaceClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceClusterCustomObjectStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceClusterCustomObjectStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the cluster scoped specified custom object
 */
export async function replaceClusterCustomObjectStatus(
  requestParameters: ReplaceClusterCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await replaceClusterCustomObjectStatusRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace the specified namespace scoped custom object
 */
export async function replaceNamespacedCustomObjectRaw(
  requestParameters: ReplaceNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObject.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObject.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObject.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObject.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObject.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObject.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified namespace scoped custom object
 */
export async function replaceNamespacedCustomObject(
  requestParameters: ReplaceNamespacedCustomObjectRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await replaceNamespacedCustomObjectRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace scale of the specified namespace scoped custom object
 */
export async function replaceNamespacedCustomObjectScaleRaw(
  requestParameters: ReplaceNamespacedCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObjectScale.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObjectScale.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace scale of the specified namespace scoped custom object
 */
export async function replaceNamespacedCustomObjectScale(
  requestParameters: ReplaceNamespacedCustomObjectScaleRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await replaceNamespacedCustomObjectScaleRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace status of the specified namespace scoped custom object
 */
export async function replaceNamespacedCustomObjectStatusRaw(
  requestParameters: ReplaceNamespacedCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<object>> {
  if (requestParameters.group === null || requestParameters.group === undefined) {
    throw new Error(
      'Required parameter requestParameters.group was null or undefined when calling replaceNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.version === null || requestParameters.version === undefined) {
    throw new Error(
      'Required parameter requestParameters.version was null or undefined when calling replaceNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.plural === null || requestParameters.plural === undefined) {
    throw new Error(
      'Required parameter requestParameters.plural was null or undefined when calling replaceNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCustomObjectStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCustomObjectStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status`
        .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
        .replace(`{${'version'}}`, encodeURIComponent(String(requestParameters.version)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace)))
        .replace(`{${'plural'}}`, encodeURIComponent(String(requestParameters.plural)))
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the specified namespace scoped custom object
 */
export async function replaceNamespacedCustomObjectStatus(
  requestParameters: ReplaceNamespacedCustomObjectStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<object> {
  const response = await replaceNamespacedCustomObjectStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}
