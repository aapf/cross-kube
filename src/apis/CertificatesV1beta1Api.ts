// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1beta1CertificateSigningRequest from '../models/V1beta1CertificateSigningRequest'
import V1beta1CertificateSigningRequestList from '../models/V1beta1CertificateSigningRequestList'

interface CreateCertificateSigningRequestRequest {
  body: V1beta1CertificateSigningRequest
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCertificateSigningRequestRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface DeleteCollectionCertificateSigningRequestRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListCertificateSigningRequestRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchCertificateSigningRequestRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchCertificateSigningRequestStatusRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadCertificateSigningRequestRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadCertificateSigningRequestStatusRequest {
  name: string
  pretty?: string
}

interface ReplaceCertificateSigningRequestRequest {
  name: string
  body: V1beta1CertificateSigningRequest
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceCertificateSigningRequestApprovalRequest {
  name: string
  body: V1beta1CertificateSigningRequest
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

interface ReplaceCertificateSigningRequestStatusRequest {
  name: string
  body: V1beta1CertificateSigningRequest
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 * create a CertificateSigningRequest
 */
export async function createCertificateSigningRequestRaw(
  requestParameters: CreateCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createCertificateSigningRequest.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a CertificateSigningRequest
 */
export async function createCertificateSigningRequest(
  requestParameters: CreateCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await createCertificateSigningRequestRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete a CertificateSigningRequest
 */
export async function deleteCertificateSigningRequestRaw(
  requestParameters: DeleteCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteCertificateSigningRequest.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a CertificateSigningRequest
 */
export async function deleteCertificateSigningRequest(
  requestParameters: DeleteCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCertificateSigningRequestRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete collection of CertificateSigningRequest
 */
export async function deleteCollectionCertificateSigningRequestRaw(
  requestParameters: DeleteCollectionCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of CertificateSigningRequest
 */
export async function deleteCollectionCertificateSigningRequest(
  requestParameters: DeleteCollectionCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionCertificateSigningRequestRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind CertificateSigningRequest
 */
export async function watchListCertificateSigningRequest(
  requestParameters: ListCertificateSigningRequestRequest,
  callback: (event: KubeEvent<ItemType<V1beta1CertificateSigningRequestList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1beta1CertificateSigningRequestList>>(
    callback,
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind CertificateSigningRequest
 */
export async function listCertificateSigningRequestRaw(
  requestParameters: ListCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequestList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind CertificateSigningRequest
 */
export async function listCertificateSigningRequest(
  requestParameters: ListCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequestList> {
  const response = await listCertificateSigningRequestRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update the specified CertificateSigningRequest
 */
export async function patchCertificateSigningRequestRaw(
  requestParameters: PatchCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchCertificateSigningRequest.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchCertificateSigningRequest.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified CertificateSigningRequest
 */
export async function patchCertificateSigningRequest(
  requestParameters: PatchCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await patchCertificateSigningRequestRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update status of the specified CertificateSigningRequest
 */
export async function patchCertificateSigningRequestStatusRaw(
  requestParameters: PatchCertificateSigningRequestStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchCertificateSigningRequestStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchCertificateSigningRequestStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified CertificateSigningRequest
 */
export async function patchCertificateSigningRequestStatus(
  requestParameters: PatchCertificateSigningRequestStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await patchCertificateSigningRequestStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read the specified CertificateSigningRequest
 */
export async function readCertificateSigningRequestRaw(
  requestParameters: ReadCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readCertificateSigningRequest.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified CertificateSigningRequest
 */
export async function readCertificateSigningRequest(
  requestParameters: ReadCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await readCertificateSigningRequestRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read status of the specified CertificateSigningRequest
 */
export async function readCertificateSigningRequestStatusRaw(
  requestParameters: ReadCertificateSigningRequestStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readCertificateSigningRequestStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified CertificateSigningRequest
 */
export async function readCertificateSigningRequestStatus(
  requestParameters: ReadCertificateSigningRequestStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await readCertificateSigningRequestStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified CertificateSigningRequest
 */
export async function replaceCertificateSigningRequestRaw(
  requestParameters: ReplaceCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceCertificateSigningRequest.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceCertificateSigningRequest.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified CertificateSigningRequest
 */
export async function replaceCertificateSigningRequest(
  requestParameters: ReplaceCertificateSigningRequestRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await replaceCertificateSigningRequestRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace approval of the specified CertificateSigningRequest
 */
export async function replaceCertificateSigningRequestApprovalRaw(
  requestParameters: ReplaceCertificateSigningRequestApprovalRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceCertificateSigningRequestApproval.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceCertificateSigningRequestApproval.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace approval of the specified CertificateSigningRequest
 */
export async function replaceCertificateSigningRequestApproval(
  requestParameters: ReplaceCertificateSigningRequestApprovalRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await replaceCertificateSigningRequestApprovalRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace status of the specified CertificateSigningRequest
 */
export async function replaceCertificateSigningRequestStatusRaw(
  requestParameters: ReplaceCertificateSigningRequestStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1CertificateSigningRequest>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceCertificateSigningRequestStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceCertificateSigningRequestStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the specified CertificateSigningRequest
 */
export async function replaceCertificateSigningRequestStatus(
  requestParameters: ReplaceCertificateSigningRequestStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1CertificateSigningRequest> {
  const response = await replaceCertificateSigningRequestStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}
