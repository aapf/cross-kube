// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V2alpha1CronJob from '../models/V2alpha1CronJob'
import V2alpha1CronJobList from '../models/V2alpha1CronJobList'

interface CreateNamespacedCronJobRequest {
  namespace: string
  body: V2alpha1CronJob
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCollectionNamespacedCronJobRequest {
  namespace: string
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteNamespacedCronJobRequest {
  name: string
  namespace: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface ListCronJobForAllNamespacesRequest {
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  pretty?: string
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListNamespacedCronJobRequest {
  namespace: string
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchNamespacedCronJobRequest {
  name: string
  namespace: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchNamespacedCronJobStatusRequest {
  name: string
  namespace: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadNamespacedCronJobRequest {
  name: string
  namespace: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadNamespacedCronJobStatusRequest {
  name: string
  namespace: string
  pretty?: string
}

interface ReplaceNamespacedCronJobRequest {
  name: string
  namespace: string
  body: V2alpha1CronJob
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceNamespacedCronJobStatusRequest {
  name: string
  namespace: string
  body: V2alpha1CronJob
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 *
 */
export default class BatchV2alpha1Api extends runtime.BaseAPI {
  /**
   * create a CronJob
   */
  async createNamespacedCronJobRaw(
    requestParameters: CreateNamespacedCronJobRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJob>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedCronJob.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a CronJob
   */
  async createNamespacedCronJob(
    requestParameters: CreateNamespacedCronJobRequest
  ): Promise<V2alpha1CronJob> {
    const response = await this.createNamespacedCronJobRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete collection of CronJob
   */
  async deleteCollectionNamespacedCronJobRaw(
    requestParameters: DeleteCollectionNamespacedCronJobRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete collection of CronJob
   */
  async deleteCollectionNamespacedCronJob(
    requestParameters: DeleteCollectionNamespacedCronJobRequest
  ): Promise<V1Status> {
    const response = await this.deleteCollectionNamespacedCronJobRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete a CronJob
   */
  async deleteNamespacedCronJobRaw(
    requestParameters: DeleteNamespacedCronJobRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedCronJob.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete a CronJob
   */
  async deleteNamespacedCronJob(
    requestParameters: DeleteNamespacedCronJobRequest
  ): Promise<V1Status> {
    const response = await this.deleteNamespacedCronJobRaw(requestParameters)
    return await response.value()
  }

  /**
   * get available resources
   */
  async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * get available resources
   */
  async getAPIResources(): Promise<V1APIResourceList> {
    const response = await this.getAPIResourcesRaw()
    return await response.value()
  }

  /**
   * list or watch objects of kind CronJob
   */
  async watchListCronJobForAllNamespaces(
    requestParameters: ListCronJobForAllNamespacesRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<V2alpha1CronJobList>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<V2alpha1CronJobList>>(
      {
        path: `/apis/batch/v2alpha1/cronjobs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind CronJob
   */
  async listCronJobForAllNamespacesRaw(
    requestParameters: ListCronJobForAllNamespacesRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJobList>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/cronjobs`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind CronJob
   */
  async listCronJobForAllNamespaces(
    requestParameters: ListCronJobForAllNamespacesRequest
  ): Promise<V2alpha1CronJobList> {
    const response = await this.listCronJobForAllNamespacesRaw(requestParameters)
    return await response.value()
  }

  /**
   * list or watch objects of kind CronJob
   */
  async watchListNamespacedCronJob(
    requestParameters: ListNamespacedCronJobRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<V2alpha1CronJobList>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<V2alpha1CronJobList>>(
      {
        path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind CronJob
   */
  async listNamespacedCronJobRaw(
    requestParameters: ListNamespacedCronJobRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJobList>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind CronJob
   */
  async listNamespacedCronJob(
    requestParameters: ListNamespacedCronJobRequest
  ): Promise<V2alpha1CronJobList> {
    const response = await this.listNamespacedCronJobRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update the specified CronJob
   */
  async patchNamespacedCronJobRaw(
    requestParameters: PatchNamespacedCronJobRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJob>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCronJob.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCronJob.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update the specified CronJob
   */
  async patchNamespacedCronJob(
    requestParameters: PatchNamespacedCronJobRequest
  ): Promise<V2alpha1CronJob> {
    const response = await this.patchNamespacedCronJobRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update status of the specified CronJob
   */
  async patchNamespacedCronJobStatusRaw(
    requestParameters: PatchNamespacedCronJobStatusRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJob>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchNamespacedCronJobStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCronJobStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchNamespacedCronJobStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update status of the specified CronJob
   */
  async patchNamespacedCronJobStatus(
    requestParameters: PatchNamespacedCronJobStatusRequest
  ): Promise<V2alpha1CronJob> {
    const response = await this.patchNamespacedCronJobStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * read the specified CronJob
   */
  async readNamespacedCronJobRaw(
    requestParameters: ReadNamespacedCronJobRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJob>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readNamespacedCronJob.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.exact !== undefined) {
      queryParameters['exact'] = requestParameters.exact
    }
    if (requestParameters._export !== undefined) {
      queryParameters['export'] = requestParameters._export
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read the specified CronJob
   */
  async readNamespacedCronJob(
    requestParameters: ReadNamespacedCronJobRequest
  ): Promise<V2alpha1CronJob> {
    const response = await this.readNamespacedCronJobRaw(requestParameters)
    return await response.value()
  }

  /**
   * read status of the specified CronJob
   */
  async readNamespacedCronJobStatusRaw(
    requestParameters: ReadNamespacedCronJobStatusRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJob>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readNamespacedCronJobStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedCronJobStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read status of the specified CronJob
   */
  async readNamespacedCronJobStatus(
    requestParameters: ReadNamespacedCronJobStatusRequest
  ): Promise<V2alpha1CronJob> {
    const response = await this.readNamespacedCronJobStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified CronJob
   */
  async replaceNamespacedCronJobRaw(
    requestParameters: ReplaceNamespacedCronJobRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJob>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCronJob.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCronJob.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCronJob.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified CronJob
   */
  async replaceNamespacedCronJob(
    requestParameters: ReplaceNamespacedCronJobRequest
  ): Promise<V2alpha1CronJob> {
    const response = await this.replaceNamespacedCronJobRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace status of the specified CronJob
   */
  async replaceNamespacedCronJobStatusRaw(
    requestParameters: ReplaceNamespacedCronJobStatusRequest
  ): Promise<runtime.ApiResponse<V2alpha1CronJob>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCronJobStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCronJobStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCronJobStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace status of the specified CronJob
   */
  async replaceNamespacedCronJobStatus(
    requestParameters: ReplaceNamespacedCronJobStatusRequest
  ): Promise<V2alpha1CronJob> {
    const response = await this.replaceNamespacedCronJobStatusRaw(requestParameters)
    return await response.value()
  }
}
