// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import PolicyV1beta1PodSecurityPolicy from '../models/PolicyV1beta1PodSecurityPolicy'
import PolicyV1beta1PodSecurityPolicyList from '../models/PolicyV1beta1PodSecurityPolicyList'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1beta1PodDisruptionBudget from '../models/V1beta1PodDisruptionBudget'
import V1beta1PodDisruptionBudgetList from '../models/V1beta1PodDisruptionBudgetList'

interface CreateNamespacedPodDisruptionBudgetRequest {
  namespace: string
  body: V1beta1PodDisruptionBudget
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface CreatePodSecurityPolicyRequest {
  body: PolicyV1beta1PodSecurityPolicy
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCollectionNamespacedPodDisruptionBudgetRequest {
  namespace: string
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteCollectionPodSecurityPolicyRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface DeletePodSecurityPolicyRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface ListNamespacedPodDisruptionBudgetRequest {
  namespace: string
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListPodDisruptionBudgetForAllNamespacesRequest {
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  pretty?: string
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListPodSecurityPolicyRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchNamespacedPodDisruptionBudgetStatusRequest {
  name: string
  namespace: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchPodSecurityPolicyRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadNamespacedPodDisruptionBudgetStatusRequest {
  name: string
  namespace: string
  pretty?: string
}

interface ReadPodSecurityPolicyRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReplaceNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  body: V1beta1PodDisruptionBudget
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceNamespacedPodDisruptionBudgetStatusRequest {
  name: string
  namespace: string
  body: V1beta1PodDisruptionBudget
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplacePodSecurityPolicyRequest {
  name: string
  body: PolicyV1beta1PodSecurityPolicy
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 *
 */
export default class PolicyV1beta1Api extends runtime.BaseAPI {
  /**
   * create a PodDisruptionBudget
   */
  async createNamespacedPodDisruptionBudgetRaw(
    requestParameters: CreateNamespacedPodDisruptionBudgetRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudget>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodDisruptionBudget.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a PodDisruptionBudget
   */
  async createNamespacedPodDisruptionBudget(
    requestParameters: CreateNamespacedPodDisruptionBudgetRequest
  ): Promise<V1beta1PodDisruptionBudget> {
    const response = await this.createNamespacedPodDisruptionBudgetRaw(requestParameters)
    return await response.value()
  }

  /**
   * create a PodSecurityPolicy
   */
  async createPodSecurityPolicyRaw(
    requestParameters: CreatePodSecurityPolicyRequest
  ): Promise<runtime.ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createPodSecurityPolicy.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/podsecuritypolicies`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a PodSecurityPolicy
   */
  async createPodSecurityPolicy(
    requestParameters: CreatePodSecurityPolicyRequest
  ): Promise<PolicyV1beta1PodSecurityPolicy> {
    const response = await this.createPodSecurityPolicyRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete collection of PodDisruptionBudget
   */
  async deleteCollectionNamespacedPodDisruptionBudgetRaw(
    requestParameters: DeleteCollectionNamespacedPodDisruptionBudgetRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete collection of PodDisruptionBudget
   */
  async deleteCollectionNamespacedPodDisruptionBudget(
    requestParameters: DeleteCollectionNamespacedPodDisruptionBudgetRequest
  ): Promise<V1Status> {
    const response = await this.deleteCollectionNamespacedPodDisruptionBudgetRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete collection of PodSecurityPolicy
   */
  async deleteCollectionPodSecurityPolicyRaw(
    requestParameters: DeleteCollectionPodSecurityPolicyRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/podsecuritypolicies`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete collection of PodSecurityPolicy
   */
  async deleteCollectionPodSecurityPolicy(
    requestParameters: DeleteCollectionPodSecurityPolicyRequest
  ): Promise<V1Status> {
    const response = await this.deleteCollectionPodSecurityPolicyRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete a PodDisruptionBudget
   */
  async deleteNamespacedPodDisruptionBudgetRaw(
    requestParameters: DeleteNamespacedPodDisruptionBudgetRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPodDisruptionBudget.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete a PodDisruptionBudget
   */
  async deleteNamespacedPodDisruptionBudget(
    requestParameters: DeleteNamespacedPodDisruptionBudgetRequest
  ): Promise<V1Status> {
    const response = await this.deleteNamespacedPodDisruptionBudgetRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete a PodSecurityPolicy
   */
  async deletePodSecurityPolicyRaw(
    requestParameters: DeletePodSecurityPolicyRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deletePodSecurityPolicy.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete a PodSecurityPolicy
   */
  async deletePodSecurityPolicy(
    requestParameters: DeletePodSecurityPolicyRequest
  ): Promise<V1Status> {
    const response = await this.deletePodSecurityPolicyRaw(requestParameters)
    return await response.value()
  }

  /**
   * get available resources
   */
  async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * get available resources
   */
  async getAPIResources(): Promise<V1APIResourceList> {
    const response = await this.getAPIResourcesRaw()
    return await response.value()
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   */
  async watchListNamespacedPodDisruptionBudget(
    requestParameters: ListNamespacedPodDisruptionBudgetRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<V1beta1PodDisruptionBudgetList>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<V1beta1PodDisruptionBudgetList>>(
      {
        path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   */
  async listNamespacedPodDisruptionBudgetRaw(
    requestParameters: ListNamespacedPodDisruptionBudgetRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudgetList>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   */
  async listNamespacedPodDisruptionBudget(
    requestParameters: ListNamespacedPodDisruptionBudgetRequest
  ): Promise<V1beta1PodDisruptionBudgetList> {
    const response = await this.listNamespacedPodDisruptionBudgetRaw(requestParameters)
    return await response.value()
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   */
  async watchListPodDisruptionBudgetForAllNamespaces(
    requestParameters: ListPodDisruptionBudgetForAllNamespacesRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<V1beta1PodDisruptionBudgetList>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<V1beta1PodDisruptionBudgetList>>(
      {
        path: `/apis/policy/v1beta1/poddisruptionbudgets`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   */
  async listPodDisruptionBudgetForAllNamespacesRaw(
    requestParameters: ListPodDisruptionBudgetForAllNamespacesRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudgetList>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/poddisruptionbudgets`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   */
  async listPodDisruptionBudgetForAllNamespaces(
    requestParameters: ListPodDisruptionBudgetForAllNamespacesRequest
  ): Promise<V1beta1PodDisruptionBudgetList> {
    const response = await this.listPodDisruptionBudgetForAllNamespacesRaw(requestParameters)
    return await response.value()
  }

  /**
   * list or watch objects of kind PodSecurityPolicy
   */
  async watchListPodSecurityPolicy(
    requestParameters: ListPodSecurityPolicyRequest,
    callback: (
      event: runtime.KubeEvent<runtime.ItemType<PolicyV1beta1PodSecurityPolicyList>>
    ) => void,
    signal?: AbortSignal
  ): Promise<void> {
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<PolicyV1beta1PodSecurityPolicyList>>(
      {
        path: `/apis/policy/v1beta1/podsecuritypolicies`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind PodSecurityPolicy
   */
  async listPodSecurityPolicyRaw(
    requestParameters: ListPodSecurityPolicyRequest
  ): Promise<runtime.ApiResponse<PolicyV1beta1PodSecurityPolicyList>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/podsecuritypolicies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind PodSecurityPolicy
   */
  async listPodSecurityPolicy(
    requestParameters: ListPodSecurityPolicyRequest
  ): Promise<PolicyV1beta1PodSecurityPolicyList> {
    const response = await this.listPodSecurityPolicyRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update the specified PodDisruptionBudget
   */
  async patchNamespacedPodDisruptionBudgetRaw(
    requestParameters: PatchNamespacedPodDisruptionBudgetRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudget>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodDisruptionBudget.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodDisruptionBudget.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update the specified PodDisruptionBudget
   */
  async patchNamespacedPodDisruptionBudget(
    requestParameters: PatchNamespacedPodDisruptionBudgetRequest
  ): Promise<V1beta1PodDisruptionBudget> {
    const response = await this.patchNamespacedPodDisruptionBudgetRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update status of the specified PodDisruptionBudget
   */
  async patchNamespacedPodDisruptionBudgetStatusRaw(
    requestParameters: PatchNamespacedPodDisruptionBudgetStatusRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudget>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update status of the specified PodDisruptionBudget
   */
  async patchNamespacedPodDisruptionBudgetStatus(
    requestParameters: PatchNamespacedPodDisruptionBudgetStatusRequest
  ): Promise<V1beta1PodDisruptionBudget> {
    const response = await this.patchNamespacedPodDisruptionBudgetStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update the specified PodSecurityPolicy
   */
  async patchPodSecurityPolicyRaw(
    requestParameters: PatchPodSecurityPolicyRequest
  ): Promise<runtime.ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchPodSecurityPolicy.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchPodSecurityPolicy.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update the specified PodSecurityPolicy
   */
  async patchPodSecurityPolicy(
    requestParameters: PatchPodSecurityPolicyRequest
  ): Promise<PolicyV1beta1PodSecurityPolicy> {
    const response = await this.patchPodSecurityPolicyRaw(requestParameters)
    return await response.value()
  }

  /**
   * read the specified PodDisruptionBudget
   */
  async readNamespacedPodDisruptionBudgetRaw(
    requestParameters: ReadNamespacedPodDisruptionBudgetRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudget>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodDisruptionBudget.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.exact !== undefined) {
      queryParameters['exact'] = requestParameters.exact
    }
    if (requestParameters._export !== undefined) {
      queryParameters['export'] = requestParameters._export
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read the specified PodDisruptionBudget
   */
  async readNamespacedPodDisruptionBudget(
    requestParameters: ReadNamespacedPodDisruptionBudgetRequest
  ): Promise<V1beta1PodDisruptionBudget> {
    const response = await this.readNamespacedPodDisruptionBudgetRaw(requestParameters)
    return await response.value()
  }

  /**
   * read status of the specified PodDisruptionBudget
   */
  async readNamespacedPodDisruptionBudgetStatusRaw(
    requestParameters: ReadNamespacedPodDisruptionBudgetStatusRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudget>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read status of the specified PodDisruptionBudget
   */
  async readNamespacedPodDisruptionBudgetStatus(
    requestParameters: ReadNamespacedPodDisruptionBudgetStatusRequest
  ): Promise<V1beta1PodDisruptionBudget> {
    const response = await this.readNamespacedPodDisruptionBudgetStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * read the specified PodSecurityPolicy
   */
  async readPodSecurityPolicyRaw(
    requestParameters: ReadPodSecurityPolicyRequest
  ): Promise<runtime.ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readPodSecurityPolicy.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.exact !== undefined) {
      queryParameters['exact'] = requestParameters.exact
    }
    if (requestParameters._export !== undefined) {
      queryParameters['export'] = requestParameters._export
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read the specified PodSecurityPolicy
   */
  async readPodSecurityPolicy(
    requestParameters: ReadPodSecurityPolicyRequest
  ): Promise<PolicyV1beta1PodSecurityPolicy> {
    const response = await this.readPodSecurityPolicyRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified PodDisruptionBudget
   */
  async replaceNamespacedPodDisruptionBudgetRaw(
    requestParameters: ReplaceNamespacedPodDisruptionBudgetRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudget>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodDisruptionBudget.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodDisruptionBudget.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodDisruptionBudget.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified PodDisruptionBudget
   */
  async replaceNamespacedPodDisruptionBudget(
    requestParameters: ReplaceNamespacedPodDisruptionBudgetRequest
  ): Promise<V1beta1PodDisruptionBudget> {
    const response = await this.replaceNamespacedPodDisruptionBudgetRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace status of the specified PodDisruptionBudget
   */
  async replaceNamespacedPodDisruptionBudgetStatusRaw(
    requestParameters: ReplaceNamespacedPodDisruptionBudgetStatusRequest
  ): Promise<runtime.ApiResponse<V1beta1PodDisruptionBudget>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.'
      )
    }
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace status of the specified PodDisruptionBudget
   */
  async replaceNamespacedPodDisruptionBudgetStatus(
    requestParameters: ReplaceNamespacedPodDisruptionBudgetStatusRequest
  ): Promise<V1beta1PodDisruptionBudget> {
    const response = await this.replaceNamespacedPodDisruptionBudgetStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified PodSecurityPolicy
   */
  async replacePodSecurityPolicyRaw(
    requestParameters: ReplacePodSecurityPolicyRequest
  ): Promise<runtime.ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replacePodSecurityPolicy.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replacePodSecurityPolicy.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified PodSecurityPolicy
   */
  async replacePodSecurityPolicy(
    requestParameters: ReplacePodSecurityPolicyRequest
  ): Promise<PolicyV1beta1PodSecurityPolicy> {
    const response = await this.replacePodSecurityPolicyRaw(requestParameters)
    return await response.value()
  }
}
