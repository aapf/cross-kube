// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import PolicyV1beta1PodSecurityPolicy from '../models/PolicyV1beta1PodSecurityPolicy'
import PolicyV1beta1PodSecurityPolicyList from '../models/PolicyV1beta1PodSecurityPolicyList'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1beta1PodDisruptionBudget from '../models/V1beta1PodDisruptionBudget'
import V1beta1PodDisruptionBudgetList from '../models/V1beta1PodDisruptionBudgetList'

interface CreateNamespacedPodDisruptionBudgetRequest {
  namespace: string
  body: V1beta1PodDisruptionBudget
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface CreatePodSecurityPolicyRequest {
  body: PolicyV1beta1PodSecurityPolicy
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCollectionNamespacedPodDisruptionBudgetRequest {
  namespace: string
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteCollectionPodSecurityPolicyRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface DeletePodSecurityPolicyRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface ListNamespacedPodDisruptionBudgetRequest {
  namespace: string
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListPodDisruptionBudgetForAllNamespacesRequest {
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  pretty?: string
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListPodSecurityPolicyRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchNamespacedPodDisruptionBudgetStatusRequest {
  name: string
  namespace: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchPodSecurityPolicyRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadNamespacedPodDisruptionBudgetStatusRequest {
  name: string
  namespace: string
  pretty?: string
}

interface ReadPodSecurityPolicyRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReplaceNamespacedPodDisruptionBudgetRequest {
  name: string
  namespace: string
  body: V1beta1PodDisruptionBudget
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceNamespacedPodDisruptionBudgetStatusRequest {
  name: string
  namespace: string
  body: V1beta1PodDisruptionBudget
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplacePodSecurityPolicyRequest {
  name: string
  body: PolicyV1beta1PodSecurityPolicy
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 * create a PodDisruptionBudget
 */
export async function createNamespacedPodDisruptionBudgetRaw(
  requestParameters: CreateNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudget>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodDisruptionBudget.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a PodDisruptionBudget
 */
export async function createNamespacedPodDisruptionBudget(
  requestParameters: CreateNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudget> {
  const response = await createNamespacedPodDisruptionBudgetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * create a PodSecurityPolicy
 */
export async function createPodSecurityPolicyRaw(
  requestParameters: CreatePodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createPodSecurityPolicy.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a PodSecurityPolicy
 */
export async function createPodSecurityPolicy(
  requestParameters: CreatePodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<PolicyV1beta1PodSecurityPolicy> {
  const response = await createPodSecurityPolicyRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete collection of PodDisruptionBudget
 */
export async function deleteCollectionNamespacedPodDisruptionBudgetRaw(
  requestParameters: DeleteCollectionNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of PodDisruptionBudget
 */
export async function deleteCollectionNamespacedPodDisruptionBudget(
  requestParameters: DeleteCollectionNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionNamespacedPodDisruptionBudgetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete collection of PodSecurityPolicy
 */
export async function deleteCollectionPodSecurityPolicyRaw(
  requestParameters: DeleteCollectionPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of PodSecurityPolicy
 */
export async function deleteCollectionPodSecurityPolicy(
  requestParameters: DeleteCollectionPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionPodSecurityPolicyRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a PodDisruptionBudget
 */
export async function deleteNamespacedPodDisruptionBudgetRaw(
  requestParameters: DeleteNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPodDisruptionBudget.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a PodDisruptionBudget
 */
export async function deleteNamespacedPodDisruptionBudget(
  requestParameters: DeleteNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteNamespacedPodDisruptionBudgetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a PodSecurityPolicy
 */
export async function deletePodSecurityPolicyRaw(
  requestParameters: DeletePodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deletePodSecurityPolicy.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a PodSecurityPolicy
 */
export async function deletePodSecurityPolicy(
  requestParameters: DeletePodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deletePodSecurityPolicyRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind PodDisruptionBudget
 */
export async function watchListNamespacedPodDisruptionBudget(
  requestParameters: ListNamespacedPodDisruptionBudgetRequest,
  callback: (event: KubeEvent<ItemType<V1beta1PodDisruptionBudgetList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1beta1PodDisruptionBudgetList>>(
    callback,
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind PodDisruptionBudget
 */
export async function listNamespacedPodDisruptionBudgetRaw(
  requestParameters: ListNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudgetList>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind PodDisruptionBudget
 */
export async function listNamespacedPodDisruptionBudget(
  requestParameters: ListNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudgetList> {
  const response = await listNamespacedPodDisruptionBudgetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * list or watch objects of kind PodDisruptionBudget
 */
export async function watchListPodDisruptionBudgetForAllNamespaces(
  requestParameters: ListPodDisruptionBudgetForAllNamespacesRequest,
  callback: (event: KubeEvent<ItemType<V1beta1PodDisruptionBudgetList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1beta1PodDisruptionBudgetList>>(
    callback,
    {
      path: `/apis/policy/v1beta1/poddisruptionbudgets`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind PodDisruptionBudget
 */
export async function listPodDisruptionBudgetForAllNamespacesRaw(
  requestParameters: ListPodDisruptionBudgetForAllNamespacesRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudgetList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/poddisruptionbudgets`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind PodDisruptionBudget
 */
export async function listPodDisruptionBudgetForAllNamespaces(
  requestParameters: ListPodDisruptionBudgetForAllNamespacesRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudgetList> {
  const response = await listPodDisruptionBudgetForAllNamespacesRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * list or watch objects of kind PodSecurityPolicy
 */
export async function watchListPodSecurityPolicy(
  requestParameters: ListPodSecurityPolicyRequest,
  callback: (event: KubeEvent<ItemType<PolicyV1beta1PodSecurityPolicyList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<PolicyV1beta1PodSecurityPolicyList>>(
    callback,
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind PodSecurityPolicy
 */
export async function listPodSecurityPolicyRaw(
  requestParameters: ListPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<PolicyV1beta1PodSecurityPolicyList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind PodSecurityPolicy
 */
export async function listPodSecurityPolicy(
  requestParameters: ListPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<PolicyV1beta1PodSecurityPolicyList> {
  const response = await listPodSecurityPolicyRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update the specified PodDisruptionBudget
 */
export async function patchNamespacedPodDisruptionBudgetRaw(
  requestParameters: PatchNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudget>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodDisruptionBudget.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodDisruptionBudget.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified PodDisruptionBudget
 */
export async function patchNamespacedPodDisruptionBudget(
  requestParameters: PatchNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudget> {
  const response = await patchNamespacedPodDisruptionBudgetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * partially update status of the specified PodDisruptionBudget
 */
export async function patchNamespacedPodDisruptionBudgetStatusRaw(
  requestParameters: PatchNamespacedPodDisruptionBudgetStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudget>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified PodDisruptionBudget
 */
export async function patchNamespacedPodDisruptionBudgetStatus(
  requestParameters: PatchNamespacedPodDisruptionBudgetStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudget> {
  const response = await patchNamespacedPodDisruptionBudgetStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * partially update the specified PodSecurityPolicy
 */
export async function patchPodSecurityPolicyRaw(
  requestParameters: PatchPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchPodSecurityPolicy.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchPodSecurityPolicy.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified PodSecurityPolicy
 */
export async function patchPodSecurityPolicy(
  requestParameters: PatchPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<PolicyV1beta1PodSecurityPolicy> {
  const response = await patchPodSecurityPolicyRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read the specified PodDisruptionBudget
 */
export async function readNamespacedPodDisruptionBudgetRaw(
  requestParameters: ReadNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudget>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodDisruptionBudget.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified PodDisruptionBudget
 */
export async function readNamespacedPodDisruptionBudget(
  requestParameters: ReadNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudget> {
  const response = await readNamespacedPodDisruptionBudgetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read status of the specified PodDisruptionBudget
 */
export async function readNamespacedPodDisruptionBudgetStatusRaw(
  requestParameters: ReadNamespacedPodDisruptionBudgetStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudget>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified PodDisruptionBudget
 */
export async function readNamespacedPodDisruptionBudgetStatus(
  requestParameters: ReadNamespacedPodDisruptionBudgetStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudget> {
  const response = await readNamespacedPodDisruptionBudgetStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read the specified PodSecurityPolicy
 */
export async function readPodSecurityPolicyRaw(
  requestParameters: ReadPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readPodSecurityPolicy.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified PodSecurityPolicy
 */
export async function readPodSecurityPolicy(
  requestParameters: ReadPodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<PolicyV1beta1PodSecurityPolicy> {
  const response = await readPodSecurityPolicyRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace the specified PodDisruptionBudget
 */
export async function replaceNamespacedPodDisruptionBudgetRaw(
  requestParameters: ReplaceNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudget>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodDisruptionBudget.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodDisruptionBudget.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodDisruptionBudget.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified PodDisruptionBudget
 */
export async function replaceNamespacedPodDisruptionBudget(
  requestParameters: ReplaceNamespacedPodDisruptionBudgetRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudget> {
  const response = await replaceNamespacedPodDisruptionBudgetRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace status of the specified PodDisruptionBudget
 */
export async function replaceNamespacedPodDisruptionBudgetStatusRaw(
  requestParameters: ReplaceNamespacedPodDisruptionBudgetStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1PodDisruptionBudget>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the specified PodDisruptionBudget
 */
export async function replaceNamespacedPodDisruptionBudgetStatus(
  requestParameters: ReplaceNamespacedPodDisruptionBudgetStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1PodDisruptionBudget> {
  const response = await replaceNamespacedPodDisruptionBudgetStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified PodSecurityPolicy
 */
export async function replacePodSecurityPolicyRaw(
  requestParameters: ReplacePodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<PolicyV1beta1PodSecurityPolicy>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replacePodSecurityPolicy.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replacePodSecurityPolicy.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/policy/v1beta1/podsecuritypolicies/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified PodSecurityPolicy
 */
export async function replacePodSecurityPolicy(
  requestParameters: ReplacePodSecurityPolicyRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<PolicyV1beta1PodSecurityPolicy> {
  const response = await replacePodSecurityPolicyRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}
