// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1LocalSubjectAccessReview from '../models/V1LocalSubjectAccessReview'
import V1SelfSubjectAccessReview from '../models/V1SelfSubjectAccessReview'
import V1SelfSubjectRulesReview from '../models/V1SelfSubjectRulesReview'
import V1SubjectAccessReview from '../models/V1SubjectAccessReview'

interface CreateNamespacedLocalSubjectAccessReviewRequest {
  namespace: string
  body: V1LocalSubjectAccessReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

interface CreateSelfSubjectAccessReviewRequest {
  body: V1SelfSubjectAccessReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

interface CreateSelfSubjectRulesReviewRequest {
  body: V1SelfSubjectRulesReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

interface CreateSubjectAccessReviewRequest {
  body: V1SubjectAccessReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

/**
 *
 */
export default class AuthorizationV1Api extends runtime.BaseAPI {
  /**
   * create a LocalSubjectAccessReview
   */
  async createNamespacedLocalSubjectAccessReviewRaw(
    requestParameters: CreateNamespacedLocalSubjectAccessReviewRequest
  ): Promise<runtime.ApiResponse<V1LocalSubjectAccessReview>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new Error(
        'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedLocalSubjectAccessReview.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createNamespacedLocalSubjectAccessReview.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a LocalSubjectAccessReview
   */
  async createNamespacedLocalSubjectAccessReview(
    requestParameters: CreateNamespacedLocalSubjectAccessReviewRequest
  ): Promise<V1LocalSubjectAccessReview> {
    const response = await this.createNamespacedLocalSubjectAccessReviewRaw(requestParameters)
    return await response.value()
  }

  /**
   * create a SelfSubjectAccessReview
   */
  async createSelfSubjectAccessReviewRaw(
    requestParameters: CreateSelfSubjectAccessReviewRequest
  ): Promise<runtime.ApiResponse<V1SelfSubjectAccessReview>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createSelfSubjectAccessReview.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/authorization.k8s.io/v1/selfsubjectaccessreviews`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a SelfSubjectAccessReview
   */
  async createSelfSubjectAccessReview(
    requestParameters: CreateSelfSubjectAccessReviewRequest
  ): Promise<V1SelfSubjectAccessReview> {
    const response = await this.createSelfSubjectAccessReviewRaw(requestParameters)
    return await response.value()
  }

  /**
   * create a SelfSubjectRulesReview
   */
  async createSelfSubjectRulesReviewRaw(
    requestParameters: CreateSelfSubjectRulesReviewRequest
  ): Promise<runtime.ApiResponse<V1SelfSubjectRulesReview>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createSelfSubjectRulesReview.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/authorization.k8s.io/v1/selfsubjectrulesreviews`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a SelfSubjectRulesReview
   */
  async createSelfSubjectRulesReview(
    requestParameters: CreateSelfSubjectRulesReviewRequest
  ): Promise<V1SelfSubjectRulesReview> {
    const response = await this.createSelfSubjectRulesReviewRaw(requestParameters)
    return await response.value()
  }

  /**
   * create a SubjectAccessReview
   */
  async createSubjectAccessReviewRaw(
    requestParameters: CreateSubjectAccessReviewRequest
  ): Promise<runtime.ApiResponse<V1SubjectAccessReview>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createSubjectAccessReview.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/authorization.k8s.io/v1/subjectaccessreviews`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a SubjectAccessReview
   */
  async createSubjectAccessReview(
    requestParameters: CreateSubjectAccessReviewRequest
  ): Promise<V1SubjectAccessReview> {
    const response = await this.createSubjectAccessReviewRaw(requestParameters)
    return await response.value()
  }

  /**
   * get available resources
   */
  async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/authorization.k8s.io/v1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * get available resources
   */
  async getAPIResources(): Promise<V1APIResourceList> {
    const response = await this.getAPIResourcesRaw()
    return await response.value()
  }
}
