// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1LocalSubjectAccessReview from '../models/V1LocalSubjectAccessReview'
import V1SelfSubjectAccessReview from '../models/V1SelfSubjectAccessReview'
import V1SelfSubjectRulesReview from '../models/V1SelfSubjectRulesReview'
import V1SubjectAccessReview from '../models/V1SubjectAccessReview'

interface CreateNamespacedLocalSubjectAccessReviewRequest {
  namespace: string
  body: V1LocalSubjectAccessReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

interface CreateSelfSubjectAccessReviewRequest {
  body: V1SelfSubjectAccessReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

interface CreateSelfSubjectRulesReviewRequest {
  body: V1SelfSubjectRulesReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

interface CreateSubjectAccessReviewRequest {
  body: V1SubjectAccessReview
  dryRun?: string
  fieldManager?: string
  pretty?: string
}

/**
 * create a LocalSubjectAccessReview
 */
export async function createNamespacedLocalSubjectAccessReviewRaw(
  requestParameters: CreateNamespacedLocalSubjectAccessReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1LocalSubjectAccessReview>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedLocalSubjectAccessReview.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createNamespacedLocalSubjectAccessReview.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a LocalSubjectAccessReview
 */
export async function createNamespacedLocalSubjectAccessReview(
  requestParameters: CreateNamespacedLocalSubjectAccessReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1LocalSubjectAccessReview> {
  const response = await createNamespacedLocalSubjectAccessReviewRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * create a SelfSubjectAccessReview
 */
export async function createSelfSubjectAccessReviewRaw(
  requestParameters: CreateSelfSubjectAccessReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1SelfSubjectAccessReview>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createSelfSubjectAccessReview.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/authorization.k8s.io/v1/selfsubjectaccessreviews`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a SelfSubjectAccessReview
 */
export async function createSelfSubjectAccessReview(
  requestParameters: CreateSelfSubjectAccessReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1SelfSubjectAccessReview> {
  const response = await createSelfSubjectAccessReviewRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * create a SelfSubjectRulesReview
 */
export async function createSelfSubjectRulesReviewRaw(
  requestParameters: CreateSelfSubjectRulesReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1SelfSubjectRulesReview>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createSelfSubjectRulesReview.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/authorization.k8s.io/v1/selfsubjectrulesreviews`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a SelfSubjectRulesReview
 */
export async function createSelfSubjectRulesReview(
  requestParameters: CreateSelfSubjectRulesReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1SelfSubjectRulesReview> {
  const response = await createSelfSubjectRulesReviewRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * create a SubjectAccessReview
 */
export async function createSubjectAccessReviewRaw(
  requestParameters: CreateSubjectAccessReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1SubjectAccessReview>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createSubjectAccessReview.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/authorization.k8s.io/v1/subjectaccessreviews`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a SubjectAccessReview
 */
export async function createSubjectAccessReview(
  requestParameters: CreateSubjectAccessReviewRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1SubjectAccessReview> {
  const response = await createSubjectAccessReviewRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/authorization.k8s.io/v1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}
