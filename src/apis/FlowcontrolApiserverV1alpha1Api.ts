/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.19
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1alpha1FlowSchema from '../models/V1alpha1FlowSchema'
import V1alpha1FlowSchemaList from '../models/V1alpha1FlowSchemaList'
import V1alpha1PriorityLevelConfiguration from '../models/V1alpha1PriorityLevelConfiguration'
import V1alpha1PriorityLevelConfigurationList from '../models/V1alpha1PriorityLevelConfigurationList'

interface CreateFlowSchemaRequest {
  body: V1alpha1FlowSchema

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface CreatePriorityLevelConfigurationRequest {
  body: V1alpha1PriorityLevelConfiguration

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface DeleteCollectionFlowSchemaRequest {
  pretty?: string

  _continue?: string

  dryRun?: string

  fieldSelector?: string

  gracePeriodSeconds?: number

  labelSelector?: string

  limit?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number

  body?: V1DeleteOptions
}

interface DeleteCollectionPriorityLevelConfigurationRequest {
  pretty?: string

  _continue?: string

  dryRun?: string

  fieldSelector?: string

  gracePeriodSeconds?: number

  labelSelector?: string

  limit?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number

  body?: V1DeleteOptions
}

interface DeleteFlowSchemaRequest {
  name: string

  pretty?: string

  dryRun?: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  body?: V1DeleteOptions
}

interface DeletePriorityLevelConfigurationRequest {
  name: string

  pretty?: string

  dryRun?: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  body?: V1DeleteOptions
}

interface ListFlowSchemaRequest {
  pretty?: string

  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface ListPriorityLevelConfigurationRequest {
  pretty?: string

  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface PatchFlowSchemaRequest {
  name: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchFlowSchemaStatusRequest {
  name: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchPriorityLevelConfigurationRequest {
  name: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchPriorityLevelConfigurationStatusRequest {
  name: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface ReadFlowSchemaRequest {
  name: string

  pretty?: string

  exact?: boolean

  _export?: boolean
}

interface ReadFlowSchemaStatusRequest {
  name: string

  pretty?: string
}

interface ReadPriorityLevelConfigurationRequest {
  name: string

  pretty?: string

  exact?: boolean

  _export?: boolean
}

interface ReadPriorityLevelConfigurationStatusRequest {
  name: string

  pretty?: string
}

interface ReplaceFlowSchemaRequest {
  name: string

  body: V1alpha1FlowSchema

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface ReplaceFlowSchemaStatusRequest {
  name: string

  body: V1alpha1FlowSchema

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface ReplacePriorityLevelConfigurationRequest {
  name: string

  body: V1alpha1PriorityLevelConfiguration

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface ReplacePriorityLevelConfigurationStatusRequest {
  name: string

  body: V1alpha1PriorityLevelConfiguration

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

/**
 * create a FlowSchema
 */
export async function createFlowSchemaRaw(
  requestParameters: CreateFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchema>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createFlowSchema.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a FlowSchema
 */
export async function createFlowSchema(
  requestParameters: CreateFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchema> {
  const response = await createFlowSchemaRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * create a PriorityLevelConfiguration
 */
export async function createPriorityLevelConfigurationRaw(
  requestParameters: CreatePriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfiguration>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createPriorityLevelConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a PriorityLevelConfiguration
 */
export async function createPriorityLevelConfiguration(
  requestParameters: CreatePriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfiguration> {
  const response = await createPriorityLevelConfigurationRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete collection of FlowSchema
 */
export async function deleteCollectionFlowSchemaRaw(
  requestParameters: DeleteCollectionFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of FlowSchema
 */
export async function deleteCollectionFlowSchema(
  requestParameters: DeleteCollectionFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionFlowSchemaRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete collection of PriorityLevelConfiguration
 */
export async function deleteCollectionPriorityLevelConfigurationRaw(
  requestParameters: DeleteCollectionPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of PriorityLevelConfiguration
 */
export async function deleteCollectionPriorityLevelConfiguration(
  requestParameters: DeleteCollectionPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionPriorityLevelConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a FlowSchema
 */
export async function deleteFlowSchemaRaw(
  requestParameters: DeleteFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteFlowSchema.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a FlowSchema
 */
export async function deleteFlowSchema(
  requestParameters: DeleteFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteFlowSchemaRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * delete a PriorityLevelConfiguration
 */
export async function deletePriorityLevelConfigurationRaw(
  requestParameters: DeletePriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deletePriorityLevelConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a PriorityLevelConfiguration
 */
export async function deletePriorityLevelConfiguration(
  requestParameters: DeletePriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deletePriorityLevelConfigurationRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind FlowSchema
 */
export async function watchListFlowSchema(
  requestParameters: ListFlowSchemaRequest,
  callback: (event: KubeEvent<ItemType<V1alpha1FlowSchemaList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1alpha1FlowSchemaList>>(
    callback,
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind FlowSchema
 */
export async function listFlowSchemaRaw(
  requestParameters: ListFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchemaList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind FlowSchema
 */
export async function listFlowSchema(
  requestParameters: ListFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchemaList> {
  const response = await listFlowSchemaRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind PriorityLevelConfiguration
 */
export async function watchListPriorityLevelConfiguration(
  requestParameters: ListPriorityLevelConfigurationRequest,
  callback: (event: KubeEvent<ItemType<V1alpha1PriorityLevelConfigurationList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1alpha1PriorityLevelConfigurationList>>(
    callback,
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind PriorityLevelConfiguration
 */
export async function listPriorityLevelConfigurationRaw(
  requestParameters: ListPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfigurationList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind PriorityLevelConfiguration
 */
export async function listPriorityLevelConfiguration(
  requestParameters: ListPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfigurationList> {
  const response = await listPriorityLevelConfigurationRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update the specified FlowSchema
 */
export async function patchFlowSchemaRaw(
  requestParameters: PatchFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchema>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchFlowSchema.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchFlowSchema.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified FlowSchema
 */
export async function patchFlowSchema(
  requestParameters: PatchFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchema> {
  const response = await patchFlowSchemaRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update status of the specified FlowSchema
 */
export async function patchFlowSchemaStatusRaw(
  requestParameters: PatchFlowSchemaStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchema>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchFlowSchemaStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchFlowSchemaStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified FlowSchema
 */
export async function patchFlowSchemaStatus(
  requestParameters: PatchFlowSchemaStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchema> {
  const response = await patchFlowSchemaStatusRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update the specified PriorityLevelConfiguration
 */
export async function patchPriorityLevelConfigurationRaw(
  requestParameters: PatchPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchPriorityLevelConfiguration.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchPriorityLevelConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified PriorityLevelConfiguration
 */
export async function patchPriorityLevelConfiguration(
  requestParameters: PatchPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfiguration> {
  const response = await patchPriorityLevelConfigurationRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * partially update status of the specified PriorityLevelConfiguration
 */
export async function patchPriorityLevelConfigurationStatusRaw(
  requestParameters: PatchPriorityLevelConfigurationStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchPriorityLevelConfigurationStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchPriorityLevelConfigurationStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified PriorityLevelConfiguration
 */
export async function patchPriorityLevelConfigurationStatus(
  requestParameters: PatchPriorityLevelConfigurationStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfiguration> {
  const response = await patchPriorityLevelConfigurationStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read the specified FlowSchema
 */
export async function readFlowSchemaRaw(
  requestParameters: ReadFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchema>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readFlowSchema.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified FlowSchema
 */
export async function readFlowSchema(
  requestParameters: ReadFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchema> {
  const response = await readFlowSchemaRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read status of the specified FlowSchema
 */
export async function readFlowSchemaStatusRaw(
  requestParameters: ReadFlowSchemaStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchema>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readFlowSchemaStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified FlowSchema
 */
export async function readFlowSchemaStatus(
  requestParameters: ReadFlowSchemaStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchema> {
  const response = await readFlowSchemaStatusRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read the specified PriorityLevelConfiguration
 */
export async function readPriorityLevelConfigurationRaw(
  requestParameters: ReadPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readPriorityLevelConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified PriorityLevelConfiguration
 */
export async function readPriorityLevelConfiguration(
  requestParameters: ReadPriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfiguration> {
  const response = await readPriorityLevelConfigurationRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read status of the specified PriorityLevelConfiguration
 */
export async function readPriorityLevelConfigurationStatusRaw(
  requestParameters: ReadPriorityLevelConfigurationStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readPriorityLevelConfigurationStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified PriorityLevelConfiguration
 */
export async function readPriorityLevelConfigurationStatus(
  requestParameters: ReadPriorityLevelConfigurationStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfiguration> {
  const response = await readPriorityLevelConfigurationStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified FlowSchema
 */
export async function replaceFlowSchemaRaw(
  requestParameters: ReplaceFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchema>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceFlowSchema.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceFlowSchema.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified FlowSchema
 */
export async function replaceFlowSchema(
  requestParameters: ReplaceFlowSchemaRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchema> {
  const response = await replaceFlowSchemaRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace status of the specified FlowSchema
 */
export async function replaceFlowSchemaStatusRaw(
  requestParameters: ReplaceFlowSchemaStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1FlowSchema>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceFlowSchemaStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceFlowSchemaStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the specified FlowSchema
 */
export async function replaceFlowSchemaStatus(
  requestParameters: ReplaceFlowSchemaStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1FlowSchema> {
  const response = await replaceFlowSchemaStatusRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * replace the specified PriorityLevelConfiguration
 */
export async function replacePriorityLevelConfigurationRaw(
  requestParameters: ReplacePriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replacePriorityLevelConfiguration.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replacePriorityLevelConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified PriorityLevelConfiguration
 */
export async function replacePriorityLevelConfiguration(
  requestParameters: ReplacePriorityLevelConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfiguration> {
  const response = await replacePriorityLevelConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace status of the specified PriorityLevelConfiguration
 */
export async function replacePriorityLevelConfigurationStatusRaw(
  requestParameters: ReplacePriorityLevelConfigurationStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1alpha1PriorityLevelConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replacePriorityLevelConfigurationStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replacePriorityLevelConfigurationStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the specified PriorityLevelConfiguration
 */
export async function replacePriorityLevelConfigurationStatus(
  requestParameters: ReplacePriorityLevelConfigurationStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1alpha1PriorityLevelConfiguration> {
  const response = await replacePriorityLevelConfigurationStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}
