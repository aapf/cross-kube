// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1StorageClass from '../models/V1StorageClass'
import V1StorageClassList from '../models/V1StorageClassList'
import V1VolumeAttachment from '../models/V1VolumeAttachment'
import V1VolumeAttachmentList from '../models/V1VolumeAttachmentList'

interface CreateStorageClassRequest {
  body: V1StorageClass
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface CreateVolumeAttachmentRequest {
  body: V1VolumeAttachment
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCollectionStorageClassRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteCollectionVolumeAttachmentRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteStorageClassRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface DeleteVolumeAttachmentRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface ListStorageClassRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListVolumeAttachmentRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchStorageClassRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchVolumeAttachmentRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchVolumeAttachmentStatusRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadStorageClassRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadVolumeAttachmentRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadVolumeAttachmentStatusRequest {
  name: string
  pretty?: string
}

interface ReplaceStorageClassRequest {
  name: string
  body: V1StorageClass
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceVolumeAttachmentRequest {
  name: string
  body: V1VolumeAttachment
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceVolumeAttachmentStatusRequest {
  name: string
  body: V1VolumeAttachment
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 *
 */
export default class StorageV1Api extends runtime.BaseAPI {
  /**
   * create a StorageClass
   */
  async createStorageClassRaw(
    requestParameters: CreateStorageClassRequest
  ): Promise<runtime.ApiResponse<V1StorageClass>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createStorageClass.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/storageclasses`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a StorageClass
   */
  async createStorageClass(requestParameters: CreateStorageClassRequest): Promise<V1StorageClass> {
    const response = await this.createStorageClassRaw(requestParameters)
    return await response.value()
  }

  /**
   * create a VolumeAttachment
   */
  async createVolumeAttachmentRaw(
    requestParameters: CreateVolumeAttachmentRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling createVolumeAttachment.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * create a VolumeAttachment
   */
  async createVolumeAttachment(
    requestParameters: CreateVolumeAttachmentRequest
  ): Promise<V1VolumeAttachment> {
    const response = await this.createVolumeAttachmentRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete collection of StorageClass
   */
  async deleteCollectionStorageClassRaw(
    requestParameters: DeleteCollectionStorageClassRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/storageclasses`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete collection of StorageClass
   */
  async deleteCollectionStorageClass(
    requestParameters: DeleteCollectionStorageClassRequest
  ): Promise<V1Status> {
    const response = await this.deleteCollectionStorageClassRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete collection of VolumeAttachment
   */
  async deleteCollectionVolumeAttachmentRaw(
    requestParameters: DeleteCollectionVolumeAttachmentRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete collection of VolumeAttachment
   */
  async deleteCollectionVolumeAttachment(
    requestParameters: DeleteCollectionVolumeAttachmentRequest
  ): Promise<V1Status> {
    const response = await this.deleteCollectionVolumeAttachmentRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete a StorageClass
   */
  async deleteStorageClassRaw(
    requestParameters: DeleteStorageClassRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deleteStorageClass.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete a StorageClass
   */
  async deleteStorageClass(requestParameters: DeleteStorageClassRequest): Promise<V1Status> {
    const response = await this.deleteStorageClassRaw(requestParameters)
    return await response.value()
  }

  /**
   * delete a VolumeAttachment
   */
  async deleteVolumeAttachmentRaw(
    requestParameters: DeleteVolumeAttachmentRequest
  ): Promise<runtime.ApiResponse<V1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling deleteVolumeAttachment.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
    }
    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents
    }
    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * delete a VolumeAttachment
   */
  async deleteVolumeAttachment(
    requestParameters: DeleteVolumeAttachmentRequest
  ): Promise<V1Status> {
    const response = await this.deleteVolumeAttachmentRaw(requestParameters)
    return await response.value()
  }

  /**
   * get available resources
   */
  async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
    const queryParameters: runtime.HTTPQuery = {}
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * get available resources
   */
  async getAPIResources(): Promise<V1APIResourceList> {
    const response = await this.getAPIResourcesRaw()
    return await response.value()
  }

  /**
   * list or watch objects of kind StorageClass
   */
  async watchListStorageClass(
    requestParameters: ListStorageClassRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<V1StorageClassList>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<V1StorageClassList>>(
      {
        path: `/apis/storage.k8s.io/v1/storageclasses`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind StorageClass
   */
  async listStorageClassRaw(
    requestParameters: ListStorageClassRequest
  ): Promise<runtime.ApiResponse<V1StorageClassList>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/storageclasses`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind StorageClass
   */
  async listStorageClass(requestParameters: ListStorageClassRequest): Promise<V1StorageClassList> {
    const response = await this.listStorageClassRaw(requestParameters)
    return await response.value()
  }

  /**
   * list or watch objects of kind VolumeAttachment
   */
  async watchListVolumeAttachment(
    requestParameters: ListVolumeAttachmentRequest,
    callback: (event: runtime.KubeEvent<runtime.ItemType<V1VolumeAttachmentList>>) => void,
    signal?: AbortSignal
  ): Promise<void> {
    const queryParameters: runtime.HTTPQuery = { watch: true }
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    await this.requestStream<runtime.ItemType<V1VolumeAttachmentList>>(
      {
        path: `/apis/storage.k8s.io/v1/volumeattachments`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
        signal
      },
      callback
    )
  }

  /**
   * list or watch objects of kind VolumeAttachment
   */
  async listVolumeAttachmentRaw(
    requestParameters: ListVolumeAttachmentRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachmentList>> {
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue
    }
    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector
    }
    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }
    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion
    }
    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * list or watch objects of kind VolumeAttachment
   */
  async listVolumeAttachment(
    requestParameters: ListVolumeAttachmentRequest
  ): Promise<V1VolumeAttachmentList> {
    const response = await this.listVolumeAttachmentRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update the specified StorageClass
   */
  async patchStorageClassRaw(
    requestParameters: PatchStorageClassRequest
  ): Promise<runtime.ApiResponse<V1StorageClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchStorageClass.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchStorageClass.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update the specified StorageClass
   */
  async patchStorageClass(requestParameters: PatchStorageClassRequest): Promise<V1StorageClass> {
    const response = await this.patchStorageClassRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update the specified VolumeAttachment
   */
  async patchVolumeAttachmentRaw(
    requestParameters: PatchVolumeAttachmentRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchVolumeAttachment.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchVolumeAttachment.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update the specified VolumeAttachment
   */
  async patchVolumeAttachment(
    requestParameters: PatchVolumeAttachmentRequest
  ): Promise<V1VolumeAttachment> {
    const response = await this.patchVolumeAttachmentRaw(requestParameters)
    return await response.value()
  }

  /**
   * partially update status of the specified VolumeAttachment
   */
  async patchVolumeAttachmentStatusRaw(
    requestParameters: PatchVolumeAttachmentStatusRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling patchVolumeAttachmentStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling patchVolumeAttachmentStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * partially update status of the specified VolumeAttachment
   */
  async patchVolumeAttachmentStatus(
    requestParameters: PatchVolumeAttachmentStatusRequest
  ): Promise<V1VolumeAttachment> {
    const response = await this.patchVolumeAttachmentStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * read the specified StorageClass
   */
  async readStorageClassRaw(
    requestParameters: ReadStorageClassRequest
  ): Promise<runtime.ApiResponse<V1StorageClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readStorageClass.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.exact !== undefined) {
      queryParameters['exact'] = requestParameters.exact
    }
    if (requestParameters._export !== undefined) {
      queryParameters['export'] = requestParameters._export
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read the specified StorageClass
   */
  async readStorageClass(requestParameters: ReadStorageClassRequest): Promise<V1StorageClass> {
    const response = await this.readStorageClassRaw(requestParameters)
    return await response.value()
  }

  /**
   * read the specified VolumeAttachment
   */
  async readVolumeAttachmentRaw(
    requestParameters: ReadVolumeAttachmentRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readVolumeAttachment.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.exact !== undefined) {
      queryParameters['exact'] = requestParameters.exact
    }
    if (requestParameters._export !== undefined) {
      queryParameters['export'] = requestParameters._export
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read the specified VolumeAttachment
   */
  async readVolumeAttachment(
    requestParameters: ReadVolumeAttachmentRequest
  ): Promise<V1VolumeAttachment> {
    const response = await this.readVolumeAttachmentRaw(requestParameters)
    return await response.value()
  }

  /**
   * read status of the specified VolumeAttachment
   */
  async readVolumeAttachmentStatusRaw(
    requestParameters: ReadVolumeAttachmentStatusRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling readVolumeAttachmentStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * read status of the specified VolumeAttachment
   */
  async readVolumeAttachmentStatus(
    requestParameters: ReadVolumeAttachmentStatusRequest
  ): Promise<V1VolumeAttachment> {
    const response = await this.readVolumeAttachmentStatusRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified StorageClass
   */
  async replaceStorageClassRaw(
    requestParameters: ReplaceStorageClassRequest
  ): Promise<runtime.ApiResponse<V1StorageClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceStorageClass.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceStorageClass.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified StorageClass
   */
  async replaceStorageClass(
    requestParameters: ReplaceStorageClassRequest
  ): Promise<V1StorageClass> {
    const response = await this.replaceStorageClassRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace the specified VolumeAttachment
   */
  async replaceVolumeAttachmentRaw(
    requestParameters: ReplaceVolumeAttachmentRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceVolumeAttachment.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceVolumeAttachment.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace the specified VolumeAttachment
   */
  async replaceVolumeAttachment(
    requestParameters: ReplaceVolumeAttachmentRequest
  ): Promise<V1VolumeAttachment> {
    const response = await this.replaceVolumeAttachmentRaw(requestParameters)
    return await response.value()
  }

  /**
   * replace status of the specified VolumeAttachment
   */
  async replaceVolumeAttachmentStatusRaw(
    requestParameters: ReplaceVolumeAttachmentStatusRequest
  ): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new Error(
        'Required parameter requestParameters.name was null or undefined when calling replaceVolumeAttachmentStatus.'
      )
    }
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new Error(
        'Required parameter requestParameters.body was null or undefined when calling replaceVolumeAttachmentStatus.'
      )
    }
    const queryParameters: runtime.HTTPQuery = {}
    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty
    }
    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun
    }
    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apis/storage.k8s.io/v1/volumeattachments/{name}/status`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    })
    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * replace status of the specified VolumeAttachment
   */
  async replaceVolumeAttachmentStatus(
    requestParameters: ReplaceVolumeAttachmentStatusRequest
  ): Promise<V1VolumeAttachment> {
    const response = await this.replaceVolumeAttachmentStatusRaw(requestParameters)
    return await response.value()
  }
}
