/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.19
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V2beta1HorizontalPodAutoscaler from '../models/V2beta1HorizontalPodAutoscaler'
import V2beta1HorizontalPodAutoscalerList from '../models/V2beta1HorizontalPodAutoscalerList'

interface CreateNamespacedHorizontalPodAutoscalerRequest {
  namespace: string

  body: V2beta1HorizontalPodAutoscaler

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface DeleteCollectionNamespacedHorizontalPodAutoscalerRequest {
  namespace: string

  pretty?: string

  _continue?: string

  dryRun?: string

  fieldSelector?: string

  gracePeriodSeconds?: number

  labelSelector?: string

  limit?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number

  body?: V1DeleteOptions
}

interface DeleteNamespacedHorizontalPodAutoscalerRequest {
  name: string

  namespace: string

  pretty?: string

  dryRun?: string

  gracePeriodSeconds?: number

  orphanDependents?: boolean

  propagationPolicy?: string

  body?: V1DeleteOptions
}

interface ListHorizontalPodAutoscalerForAllNamespacesRequest {
  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  pretty?: string

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface ListNamespacedHorizontalPodAutoscalerRequest {
  namespace: string

  pretty?: string

  allowWatchBookmarks?: boolean

  _continue?: string

  fieldSelector?: string

  labelSelector?: string

  limit?: number

  resourceVersion?: string

  resourceVersionMatch?: string

  timeoutSeconds?: number
}

interface PatchNamespacedHorizontalPodAutoscalerRequest {
  name: string

  namespace: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface PatchNamespacedHorizontalPodAutoscalerStatusRequest {
  name: string

  namespace: string

  body: object

  pretty?: string

  dryRun?: string

  fieldManager?: string

  force?: boolean
}

interface ReadNamespacedHorizontalPodAutoscalerRequest {
  name: string

  namespace: string

  pretty?: string

  exact?: boolean

  _export?: boolean
}

interface ReadNamespacedHorizontalPodAutoscalerStatusRequest {
  name: string

  namespace: string

  pretty?: string
}

interface ReplaceNamespacedHorizontalPodAutoscalerRequest {
  name: string

  namespace: string

  body: V2beta1HorizontalPodAutoscaler

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

interface ReplaceNamespacedHorizontalPodAutoscalerStatusRequest {
  name: string

  namespace: string

  body: V2beta1HorizontalPodAutoscaler

  pretty?: string

  dryRun?: string

  fieldManager?: string
}

/**
 * create a HorizontalPodAutoscaler
 */
export async function createNamespacedHorizontalPodAutoscalerRaw(
  requestParameters: CreateNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscaler>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedHorizontalPodAutoscaler.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a HorizontalPodAutoscaler
 */
export async function createNamespacedHorizontalPodAutoscaler(
  requestParameters: CreateNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscaler> {
  const response = await createNamespacedHorizontalPodAutoscalerRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete collection of HorizontalPodAutoscaler
 */
export async function deleteCollectionNamespacedHorizontalPodAutoscalerRaw(
  requestParameters: DeleteCollectionNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of HorizontalPodAutoscaler
 */
export async function deleteCollectionNamespacedHorizontalPodAutoscaler(
  requestParameters: DeleteCollectionNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionNamespacedHorizontalPodAutoscalerRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a HorizontalPodAutoscaler
 */
export async function deleteNamespacedHorizontalPodAutoscalerRaw(
  requestParameters: DeleteNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a HorizontalPodAutoscaler
 */
export async function deleteNamespacedHorizontalPodAutoscaler(
  requestParameters: DeleteNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteNamespacedHorizontalPodAutoscalerRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind HorizontalPodAutoscaler
 */
export async function watchListHorizontalPodAutoscalerForAllNamespaces(
  requestParameters: ListHorizontalPodAutoscalerForAllNamespacesRequest,
  callback: (event: KubeEvent<ItemType<V2beta1HorizontalPodAutoscalerList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V2beta1HorizontalPodAutoscalerList>>(
    callback,
    {
      path: `/apis/autoscaling/v2beta1/horizontalpodautoscalers`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind HorizontalPodAutoscaler
 */
export async function listHorizontalPodAutoscalerForAllNamespacesRaw(
  requestParameters: ListHorizontalPodAutoscalerForAllNamespacesRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscalerList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/horizontalpodautoscalers`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind HorizontalPodAutoscaler
 */
export async function listHorizontalPodAutoscalerForAllNamespaces(
  requestParameters: ListHorizontalPodAutoscalerForAllNamespacesRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscalerList> {
  const response = await listHorizontalPodAutoscalerForAllNamespacesRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * list or watch objects of kind HorizontalPodAutoscaler
 */
export async function watchListNamespacedHorizontalPodAutoscaler(
  requestParameters: ListNamespacedHorizontalPodAutoscalerRequest,
  callback: (event: KubeEvent<ItemType<V2beta1HorizontalPodAutoscalerList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V2beta1HorizontalPodAutoscalerList>>(
    callback,
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind HorizontalPodAutoscaler
 */
export async function listNamespacedHorizontalPodAutoscalerRaw(
  requestParameters: ListNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscalerList>> {
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.allowWatchBookmarks !== undefined) {
    queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.resourceVersionMatch !== undefined) {
    queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(requestParameters.namespace))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind HorizontalPodAutoscaler
 */
export async function listNamespacedHorizontalPodAutoscaler(
  requestParameters: ListNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscalerList> {
  const response = await listNamespacedHorizontalPodAutoscalerRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * partially update the specified HorizontalPodAutoscaler
 */
export async function patchNamespacedHorizontalPodAutoscalerRaw(
  requestParameters: PatchNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscaler>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified HorizontalPodAutoscaler
 */
export async function patchNamespacedHorizontalPodAutoscaler(
  requestParameters: PatchNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscaler> {
  const response = await patchNamespacedHorizontalPodAutoscalerRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * partially update status of the specified HorizontalPodAutoscaler
 */
export async function patchNamespacedHorizontalPodAutoscalerStatusRaw(
  requestParameters: PatchNamespacedHorizontalPodAutoscalerStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscaler>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update status of the specified HorizontalPodAutoscaler
 */
export async function patchNamespacedHorizontalPodAutoscalerStatus(
  requestParameters: PatchNamespacedHorizontalPodAutoscalerStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscaler> {
  const response = await patchNamespacedHorizontalPodAutoscalerStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read the specified HorizontalPodAutoscaler
 */
export async function readNamespacedHorizontalPodAutoscalerRaw(
  requestParameters: ReadNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscaler>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readNamespacedHorizontalPodAutoscaler.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified HorizontalPodAutoscaler
 */
export async function readNamespacedHorizontalPodAutoscaler(
  requestParameters: ReadNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscaler> {
  const response = await readNamespacedHorizontalPodAutoscalerRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read status of the specified HorizontalPodAutoscaler
 */
export async function readNamespacedHorizontalPodAutoscalerStatusRaw(
  requestParameters: ReadNamespacedHorizontalPodAutoscalerStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscaler>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read status of the specified HorizontalPodAutoscaler
 */
export async function readNamespacedHorizontalPodAutoscalerStatus(
  requestParameters: ReadNamespacedHorizontalPodAutoscalerStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscaler> {
  const response = await readNamespacedHorizontalPodAutoscalerStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified HorizontalPodAutoscaler
 */
export async function replaceNamespacedHorizontalPodAutoscalerRaw(
  requestParameters: ReplaceNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscaler>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified HorizontalPodAutoscaler
 */
export async function replaceNamespacedHorizontalPodAutoscaler(
  requestParameters: ReplaceNamespacedHorizontalPodAutoscalerRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscaler> {
  const response = await replaceNamespacedHorizontalPodAutoscalerRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace status of the specified HorizontalPodAutoscaler
 */
export async function replaceNamespacedHorizontalPodAutoscalerStatusRaw(
  requestParameters: ReplaceNamespacedHorizontalPodAutoscalerStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V2beta1HorizontalPodAutoscaler>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
    throw new Error(
      'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`
        .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace status of the specified HorizontalPodAutoscaler
 */
export async function replaceNamespacedHorizontalPodAutoscalerStatus(
  requestParameters: ReplaceNamespacedHorizontalPodAutoscalerStatusRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V2beta1HorizontalPodAutoscaler> {
  const response = await replaceNamespacedHorizontalPodAutoscalerStatusRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}
