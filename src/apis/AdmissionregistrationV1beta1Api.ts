// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  RequestOpts,
  HTTPHeaders,
  HTTPQuery,
  ApiResponse,
  StringApiResponse,
  JSONApiResponse,
  ItemType,
  KubeEvent,
  request,
  requestStream
} from '../runtime'
import V1APIResourceList from '../models/V1APIResourceList'
import V1DeleteOptions from '../models/V1DeleteOptions'
import V1Status from '../models/V1Status'
import V1beta1MutatingWebhookConfiguration from '../models/V1beta1MutatingWebhookConfiguration'
import V1beta1MutatingWebhookConfigurationList from '../models/V1beta1MutatingWebhookConfigurationList'
import V1beta1ValidatingWebhookConfiguration from '../models/V1beta1ValidatingWebhookConfiguration'
import V1beta1ValidatingWebhookConfigurationList from '../models/V1beta1ValidatingWebhookConfigurationList'

interface CreateMutatingWebhookConfigurationRequest {
  body: V1beta1MutatingWebhookConfiguration
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface CreateValidatingWebhookConfigurationRequest {
  body: V1beta1ValidatingWebhookConfiguration
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface DeleteCollectionMutatingWebhookConfigurationRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteCollectionValidatingWebhookConfigurationRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface DeleteMutatingWebhookConfigurationRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface DeleteValidatingWebhookConfigurationRequest {
  name: string
  pretty?: string
  dryRun?: string
  gracePeriodSeconds?: number
  orphanDependents?: boolean
  propagationPolicy?: string
  body?: V1DeleteOptions
}

interface ListMutatingWebhookConfigurationRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface ListValidatingWebhookConfigurationRequest {
  pretty?: string
  _continue?: string
  fieldSelector?: string
  labelSelector?: string
  limit?: number
  resourceVersion?: string
  timeoutSeconds?: number
}

interface PatchMutatingWebhookConfigurationRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface PatchValidatingWebhookConfigurationRequest {
  name: string
  body: object
  pretty?: string
  dryRun?: string
  fieldManager?: string
  force?: boolean
}

interface ReadMutatingWebhookConfigurationRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReadValidatingWebhookConfigurationRequest {
  name: string
  pretty?: string
  exact?: boolean
  _export?: boolean
}

interface ReplaceMutatingWebhookConfigurationRequest {
  name: string
  body: V1beta1MutatingWebhookConfiguration
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

interface ReplaceValidatingWebhookConfigurationRequest {
  name: string
  body: V1beta1ValidatingWebhookConfiguration
  pretty?: string
  dryRun?: string
  fieldManager?: string
}

/**
 * create a MutatingWebhookConfiguration
 */
export async function createMutatingWebhookConfigurationRaw(
  requestParameters: CreateMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1MutatingWebhookConfiguration>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createMutatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a MutatingWebhookConfiguration
 */
export async function createMutatingWebhookConfiguration(
  requestParameters: CreateMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1MutatingWebhookConfiguration> {
  const response = await createMutatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * create a ValidatingWebhookConfiguration
 */
export async function createValidatingWebhookConfigurationRaw(
  requestParameters: CreateValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1ValidatingWebhookConfiguration>> {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling createValidatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * create a ValidatingWebhookConfiguration
 */
export async function createValidatingWebhookConfiguration(
  requestParameters: CreateValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1ValidatingWebhookConfiguration> {
  const response = await createValidatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete collection of MutatingWebhookConfiguration
 */
export async function deleteCollectionMutatingWebhookConfigurationRaw(
  requestParameters: DeleteCollectionMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of MutatingWebhookConfiguration
 */
export async function deleteCollectionMutatingWebhookConfiguration(
  requestParameters: DeleteCollectionMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionMutatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete collection of ValidatingWebhookConfiguration
 */
export async function deleteCollectionValidatingWebhookConfigurationRaw(
  requestParameters: DeleteCollectionValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete collection of ValidatingWebhookConfiguration
 */
export async function deleteCollectionValidatingWebhookConfiguration(
  requestParameters: DeleteCollectionValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteCollectionValidatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a MutatingWebhookConfiguration
 */
export async function deleteMutatingWebhookConfigurationRaw(
  requestParameters: DeleteMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteMutatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a MutatingWebhookConfiguration
 */
export async function deleteMutatingWebhookConfiguration(
  requestParameters: DeleteMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteMutatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * delete a ValidatingWebhookConfiguration
 */
export async function deleteValidatingWebhookConfigurationRaw(
  requestParameters: DeleteValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1Status>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling deleteValidatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.gracePeriodSeconds !== undefined) {
    queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds
  }
  if (requestParameters.orphanDependents !== undefined) {
    queryParameters['orphanDependents'] = requestParameters.orphanDependents
  }
  if (requestParameters.propagationPolicy !== undefined) {
    queryParameters['propagationPolicy'] = requestParameters.propagationPolicy
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * delete a ValidatingWebhookConfiguration
 */
export async function deleteValidatingWebhookConfiguration(
  requestParameters: DeleteValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1Status> {
  const response = await deleteValidatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * get available resources
 */
export async function getAPIResourcesRaw(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1APIResourceList>> {
  const queryParameters: HTTPQuery = {}
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * get available resources
 */
export async function getAPIResources(
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1APIResourceList> {
  const response = await getAPIResourcesRaw(...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind MutatingWebhookConfiguration
 */
export async function watchListMutatingWebhookConfiguration(
  requestParameters: ListMutatingWebhookConfigurationRequest,
  callback: (event: KubeEvent<ItemType<V1beta1MutatingWebhookConfigurationList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1beta1MutatingWebhookConfigurationList>>(
    callback,
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind MutatingWebhookConfiguration
 */
export async function listMutatingWebhookConfigurationRaw(
  requestParameters: ListMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1MutatingWebhookConfigurationList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind MutatingWebhookConfiguration
 */
export async function listMutatingWebhookConfiguration(
  requestParameters: ListMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1MutatingWebhookConfigurationList> {
  const response = await listMutatingWebhookConfigurationRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * list or watch objects of kind ValidatingWebhookConfiguration
 */
export async function watchListValidatingWebhookConfiguration(
  requestParameters: ListValidatingWebhookConfigurationRequest,
  callback: (event: KubeEvent<ItemType<V1beta1ValidatingWebhookConfigurationList>>) => void,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<void> {
  const queryParameters: HTTPQuery = { watch: true }
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  await requestStream<ItemType<V1beta1ValidatingWebhookConfigurationList>>(
    callback,
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
}

/**
 * list or watch objects of kind ValidatingWebhookConfiguration
 */
export async function listValidatingWebhookConfigurationRaw(
  requestParameters: ListValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1ValidatingWebhookConfigurationList>> {
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters._continue !== undefined) {
    queryParameters['continue'] = requestParameters._continue
  }
  if (requestParameters.fieldSelector !== undefined) {
    queryParameters['fieldSelector'] = requestParameters.fieldSelector
  }
  if (requestParameters.labelSelector !== undefined) {
    queryParameters['labelSelector'] = requestParameters.labelSelector
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit
  }
  if (requestParameters.resourceVersion !== undefined) {
    queryParameters['resourceVersion'] = requestParameters.resourceVersion
  }
  if (requestParameters.timeoutSeconds !== undefined) {
    queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * list or watch objects of kind ValidatingWebhookConfiguration
 */
export async function listValidatingWebhookConfiguration(
  requestParameters: ListValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1ValidatingWebhookConfigurationList> {
  const response = await listValidatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * partially update the specified MutatingWebhookConfiguration
 */
export async function patchMutatingWebhookConfigurationRaw(
  requestParameters: PatchMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1MutatingWebhookConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchMutatingWebhookConfiguration.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchMutatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified MutatingWebhookConfiguration
 */
export async function patchMutatingWebhookConfiguration(
  requestParameters: PatchMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1MutatingWebhookConfiguration> {
  const response = await patchMutatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * partially update the specified ValidatingWebhookConfiguration
 */
export async function patchValidatingWebhookConfigurationRaw(
  requestParameters: PatchValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1ValidatingWebhookConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling patchValidatingWebhookConfiguration.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling patchValidatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  if (requestParameters.force !== undefined) {
    queryParameters['force'] = requestParameters.force
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * partially update the specified ValidatingWebhookConfiguration
 */
export async function patchValidatingWebhookConfiguration(
  requestParameters: PatchValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1ValidatingWebhookConfiguration> {
  const response = await patchValidatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * read the specified MutatingWebhookConfiguration
 */
export async function readMutatingWebhookConfigurationRaw(
  requestParameters: ReadMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1MutatingWebhookConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readMutatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified MutatingWebhookConfiguration
 */
export async function readMutatingWebhookConfiguration(
  requestParameters: ReadMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1MutatingWebhookConfiguration> {
  const response = await readMutatingWebhookConfigurationRaw(requestParameters, ...requestOptsArray)
  return await response.value()
}

/**
 * read the specified ValidatingWebhookConfiguration
 */
export async function readValidatingWebhookConfigurationRaw(
  requestParameters: ReadValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1ValidatingWebhookConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling readValidatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.exact !== undefined) {
    queryParameters['exact'] = requestParameters.exact
  }
  if (requestParameters._export !== undefined) {
    queryParameters['export'] = requestParameters._export
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * read the specified ValidatingWebhookConfiguration
 */
export async function readValidatingWebhookConfiguration(
  requestParameters: ReadValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1ValidatingWebhookConfiguration> {
  const response = await readValidatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified MutatingWebhookConfiguration
 */
export async function replaceMutatingWebhookConfigurationRaw(
  requestParameters: ReplaceMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1MutatingWebhookConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceMutatingWebhookConfiguration.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceMutatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified MutatingWebhookConfiguration
 */
export async function replaceMutatingWebhookConfiguration(
  requestParameters: ReplaceMutatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1MutatingWebhookConfiguration> {
  const response = await replaceMutatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}

/**
 * replace the specified ValidatingWebhookConfiguration
 */
export async function replaceValidatingWebhookConfigurationRaw(
  requestParameters: ReplaceValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<ApiResponse<V1beta1ValidatingWebhookConfiguration>> {
  if (requestParameters.name === null || requestParameters.name === undefined) {
    throw new Error(
      'Required parameter requestParameters.name was null or undefined when calling replaceValidatingWebhookConfiguration.'
    )
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new Error(
      'Required parameter requestParameters.body was null or undefined when calling replaceValidatingWebhookConfiguration.'
    )
  }
  const queryParameters: HTTPQuery = {}
  if (requestParameters.pretty !== undefined) {
    queryParameters['pretty'] = requestParameters.pretty
  }
  if (requestParameters.dryRun !== undefined) {
    queryParameters['dryRun'] = requestParameters.dryRun
  }
  if (requestParameters.fieldManager !== undefined) {
    queryParameters['fieldManager'] = requestParameters.fieldManager
  }
  const headerParameters: HTTPHeaders = {}

  const response = await request(
    {
      path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(requestParameters.name))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    },
    ...requestOptsArray
  )
  return new JSONApiResponse<any>(response)
}

/**
 * replace the specified ValidatingWebhookConfiguration
 */
export async function replaceValidatingWebhookConfiguration(
  requestParameters: ReplaceValidatingWebhookConfigurationRequest,
  ...requestOptsArray: Partial<RequestOpts>[]
): Promise<V1beta1ValidatingWebhookConfiguration> {
  const response = await replaceValidatingWebhookConfigurationRaw(
    requestParameters,
    ...requestOptsArray
  )
  return await response.value()
}
