// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.14.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { KubeObject } from '../runtime'
import V1AWSElasticBlockStoreVolumeSource from './V1AWSElasticBlockStoreVolumeSource'
import V1AzureDiskVolumeSource from './V1AzureDiskVolumeSource'
import V1AzureFilePersistentVolumeSource from './V1AzureFilePersistentVolumeSource'
import V1CSIPersistentVolumeSource from './V1CSIPersistentVolumeSource'
import V1CephFSPersistentVolumeSource from './V1CephFSPersistentVolumeSource'
import V1CinderPersistentVolumeSource from './V1CinderPersistentVolumeSource'
import V1FCVolumeSource from './V1FCVolumeSource'
import V1FlexPersistentVolumeSource from './V1FlexPersistentVolumeSource'
import V1FlockerVolumeSource from './V1FlockerVolumeSource'
import V1GCEPersistentDiskVolumeSource from './V1GCEPersistentDiskVolumeSource'
import V1GlusterfsPersistentVolumeSource from './V1GlusterfsPersistentVolumeSource'
import V1HostPathVolumeSource from './V1HostPathVolumeSource'
import V1ISCSIPersistentVolumeSource from './V1ISCSIPersistentVolumeSource'
import V1LocalVolumeSource from './V1LocalVolumeSource'
import V1NFSVolumeSource from './V1NFSVolumeSource'
import V1ObjectReference from './V1ObjectReference'
import V1PhotonPersistentDiskVolumeSource from './V1PhotonPersistentDiskVolumeSource'
import V1PortworxVolumeSource from './V1PortworxVolumeSource'
import V1QuobyteVolumeSource from './V1QuobyteVolumeSource'
import V1RBDPersistentVolumeSource from './V1RBDPersistentVolumeSource'
import V1ScaleIOPersistentVolumeSource from './V1ScaleIOPersistentVolumeSource'
import V1StorageOSPersistentVolumeSource from './V1StorageOSPersistentVolumeSource'
import V1VolumeNodeAffinity from './V1VolumeNodeAffinity'
import V1VsphereVirtualDiskVolumeSource from './V1VsphereVirtualDiskVolumeSource'

/**
 * PersistentVolumeSpec is the specification of a persistent volume.
 * @export
 * @interface V1PersistentVolumeSpec
 */
export default interface V1PersistentVolumeSpec extends KubeObject {
  /**
   * AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
   * @type {Array<string>}
   * @memberof V1PersistentVolumeSpec
   */
  accessModes?: Array<string>

  /**
   *
   * @type {V1AWSElasticBlockStoreVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  awsElasticBlockStore?: V1AWSElasticBlockStoreVolumeSource

  /**
   *
   * @type {V1AzureDiskVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  azureDisk?: V1AzureDiskVolumeSource

  /**
   *
   * @type {V1AzureFilePersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  azureFile?: V1AzureFilePersistentVolumeSource

  /**
   * A description of the persistent volume\'s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
   * @type {{ [key: string]: string; }}
   * @memberof V1PersistentVolumeSpec
   */
  capacity?: { [key: string]: string }

  /**
   *
   * @type {V1CephFSPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  cephfs?: V1CephFSPersistentVolumeSource

  /**
   *
   * @type {V1CinderPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  cinder?: V1CinderPersistentVolumeSource

  /**
   *
   * @type {V1ObjectReference}
   * @memberof V1PersistentVolumeSpec
   */
  claimRef?: V1ObjectReference

  /**
   *
   * @type {V1CSIPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  csi?: V1CSIPersistentVolumeSource

  /**
   *
   * @type {V1FCVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  fc?: V1FCVolumeSource

  /**
   *
   * @type {V1FlexPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  flexVolume?: V1FlexPersistentVolumeSource

  /**
   *
   * @type {V1FlockerVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  flocker?: V1FlockerVolumeSource

  /**
   *
   * @type {V1GCEPersistentDiskVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  gcePersistentDisk?: V1GCEPersistentDiskVolumeSource

  /**
   *
   * @type {V1GlusterfsPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  glusterfs?: V1GlusterfsPersistentVolumeSource

  /**
   *
   * @type {V1HostPathVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  hostPath?: V1HostPathVolumeSource

  /**
   *
   * @type {V1ISCSIPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  iscsi?: V1ISCSIPersistentVolumeSource

  /**
   *
   * @type {V1LocalVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  local?: V1LocalVolumeSource

  /**
   * A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
   * @type {Array<string>}
   * @memberof V1PersistentVolumeSpec
   */
  mountOptions?: Array<string>

  /**
   *
   * @type {V1NFSVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  nfs?: V1NFSVolumeSource

  /**
   *
   * @type {V1VolumeNodeAffinity}
   * @memberof V1PersistentVolumeSpec
   */
  nodeAffinity?: V1VolumeNodeAffinity

  /**
   * What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
   * @type {string}
   * @memberof V1PersistentVolumeSpec
   */
  persistentVolumeReclaimPolicy?: string

  /**
   *
   * @type {V1PhotonPersistentDiskVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  photonPersistentDisk?: V1PhotonPersistentDiskVolumeSource

  /**
   *
   * @type {V1PortworxVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  portworxVolume?: V1PortworxVolumeSource

  /**
   *
   * @type {V1QuobyteVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  quobyte?: V1QuobyteVolumeSource

  /**
   *
   * @type {V1RBDPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  rbd?: V1RBDPersistentVolumeSource

  /**
   *
   * @type {V1ScaleIOPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  scaleIO?: V1ScaleIOPersistentVolumeSource

  /**
   * Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
   * @type {string}
   * @memberof V1PersistentVolumeSpec
   */
  storageClassName?: string

  /**
   *
   * @type {V1StorageOSPersistentVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  storageos?: V1StorageOSPersistentVolumeSource

  /**
   * volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is a beta feature.
   * @type {string}
   * @memberof V1PersistentVolumeSpec
   */
  volumeMode?: string

  /**
   *
   * @type {V1VsphereVirtualDiskVolumeSource}
   * @memberof V1PersistentVolumeSpec
   */
  vsphereVolume?: V1VsphereVirtualDiskVolumeSource
}
