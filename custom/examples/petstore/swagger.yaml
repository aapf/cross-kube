swagger: '2.0'
info:
  version: 0.1.0
  title: 'Petstore API description: A sample API that uses a petstore as an example'
basePath: /apis/group.example.com/v1beta1
definitions:
  v1beta1.Pet:
    description: Pet
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object. Servers
          should convert recognized schemas to the latest internal value, and may reject
          unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents. Servers
          may infer this from the endpoint the client submits requests to. Cannot be updated. In
          CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      metadata:
        description: |-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        $ref: 'k8s-swagger.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      spec:
        $ref: '#/definitions/v1beta1.PetSpec'
        description: |-
          Specification of the desired behavior of the Pet. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
      status:
        $ref: '#/definitions/v1beta1.PetStatus'
        description: |-
          Most recently observed status of the Pet. This data may not be up to date. Populated by
          the system. Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    type: object
  v1beta1.PetList:
    description: PetList is a list of Pets.
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object. Servers
          should convert recognized schemas to the latest internal value, and may reject
          unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
      items:
        description: |-
          List of Pets. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
        items:
          $ref: '#/definitions/v1beta1.Pet'
        type: array
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents. Servers
          may infer this from the endpoint the client submits requests to. Cannot be updated. In
          CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      metadata:
        description: |-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        $ref: 'k8s-swagger.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    type: object
  v1beta1.PetSpec:
    description: PetSpec is a description of a Pet.
    properties:
      category:
        description: |-
          Category of the pet.
        type: string
    type: object
  v1beta1.PetStatus:
    description: PetStatus represents information about the status of a Pet.
    properties:
      available:
        description: |-
          Whether or not the pet is available.
        type: boolean
    type: object
paths:
  /apis/group.example.com/v1beta1/namespaces/{namespace}/pets:
    delete:
      consumes:
      - '*/*'
      description: delete collection of Pet
      operationId: deleteCollectionNamespacedPet
      parameters:
      - description: |-
          The continue option should be set when retrieving more results from the server. Since
          this value is server defined, clients may only use the continue value from a previous
          query result with identical query parameters (except for the value of continue) and the
          server may reject a continue value it does not recognize. If the specified continue
          value is no longer valid whether due to expiration (generally five to fifteen minutes)
          or a configuration change on the server, the server will respond with a 410
          ResourceExpired error together with a continue token. If the client needs a consistent
          list, it must restart their list without the continue field. Otherwise, the client may
          send another list request with the token received with the 410 error, the server will
          respond with a list starting from the next key, but from the latest snapshot, which is
          inconsistent from the previous list results - objects that are created, modified, or
          deleted after the first list request will be included in the response, as long as their
          keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last
          resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        type: string
        uniqueItems: true
      - description: |-
          A selector to restrict the list of returned objects by their fields. Defaults to
          everything.
        in: query
        name: fieldSelector
        type: string
        uniqueItems: true
      - description: |-
          A selector to restrict the list of returned objects by their labels. Defaults to
          everything.
        in: query
        name: labelSelector
        type: string
        uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist,
          the server will set the `continue` field on the list metadata to a value that can be
          used with the same initial query to retrieve the next set of results. Setting a limit
          may return fewer than the requested amount of items (up to zero items) in the event all
          requested objects are filtered out and clients should only use the presence of the
          continue field to determine whether more results are available. Servers may choose not
          to support the limit argument and will return all of the available results. If limit is
          specified and the continue field is empty, clients may assume that no more results are
          available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to
          issuing a single list call without a limit - that is, no objects created, modified, or
          deleted after the first request is issued will be included in any subsequent continued
          requests. This is sometimes referred to as a consistent snapshot, and ensures that a
          client that is using limit to receive smaller chunks of a very large result can ensure
          they see all possible objects. If objects are updated during a chunked list the version
          of the object that was present at the time the first list result was calculated is
          returned.
        in: query
        name: limit
        type: integer
        uniqueItems: true
      - description: |-
          When specified with a watch call, shows changes that occur after that particular version
          of a resource. Defaults to changes from the beginning of history. When specified for
          list: - if unset, then the result is returned from remote storage based on quorum-read
          flag; - if it''s 0, then we simply return what we currently have in cache, no guarantee;
          - if set to non zero, then the result is at least as fresh as given rv.
        in: query
        name: resourceVersion
        type: string
        uniqueItems: true
      - description: |-
          Timeout for the list/watch call. This limits the duration of the call, regardless of any
          activity or inactivity.
        in: query
        name: timeoutSeconds
        type: integer
        uniqueItems: true
      - description: |-
          Watch for changes to the described resources and return them as a stream of add, update,
          and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        type: boolean
        uniqueItems: true
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.PetStatus'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: group.example.com
        kind: Pet
        version: v1beta1
    get:
      consumes:
      - '*/*'
      description: |-
        list or watch objects of kind Pet
      operationId: listNamespacedPet
      parameters:
      - description: |-
          The continue option should be set when retrieving more results from the server. Since
          this value is server defined, clients may only use the continue value from a previous
          query result with identical query parameters (except for the value of continue) and the
          server may reject a continue value it does not recognize. If the specified continue
          value is no longer valid whether due to expiration (generally five to fifteen minutes)
          or a configuration change on the server, the server will respond with a 410
          ResourceExpired error together with a continue token. If the client needs a consistent
          list, it must restart their list without the continue field. Otherwise, the client may
          send another list request with the token received with the 410 error, the server will
          respond with a list starting from the next key, but from the latest snapshot, which is
          inconsistent from the previous list results - objects that are created, modified, or
          deleted after the first list request will be included in the response, as long as their
          keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last
          resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        type: string
        uniqueItems: true
      - description: |-
          A selector to restrict the list of returned objects by their fields. Defaults to
          everything.
        in: query
        name: fieldSelector
        type: string
        uniqueItems: true
      - description: |-
          A selector to restrict the list of returned objects by their labels. Defaults to
          everything.
        in: query
        name: labelSelector
        type: string
        uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist,
          the server will set the `continue` field on the list metadata to a value that can be
          used with the same initial query to retrieve the next set of results. Setting a limit
          may return fewer than the requested amount of items (up to zero items) in the event all
          requested objects are filtered out and clients should only use the presence of the
          continue field to determine whether more results are available. Servers may choose not
          to support the limit argument and will return all of the available results. If limit is
          specified and the continue field is empty, clients may assume that no more results are
          available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to
          issuing a single list call without a limit - that is, no objects created, modified, or
          deleted after the first request is issued will be included in any subsequent continued
          requests. This is sometimes referred to as a consistent snapshot, and ensures that a
          client that is using limit to receive smaller chunks of a very large result can ensure
          they see all possible objects. If objects are updated during a chunked list the version
          of the object that was present at the time the first list result was calculated is
          returned.
        in: query
        name: limit
        type: integer
        uniqueItems: true
      - description: |-
          When specified with a watch call, shows changes that occur after that particular version
          of a resource. Defaults to changes from the beginning of history. When specified for
          list: - if unset, then the result is returned from remote storage based on quorum-read
          flag; - if it''s 0, then we simply return what we currently have in cache, no guarantee;
          - if set to non zero, then the result is at least as fresh as given rv.
        in: query
        name: resourceVersion
        type: string
        uniqueItems: true
      - description: |-
          Timeout for the list/watch call. This limits the duration of the call, regardless of any
          activity or inactivity.
        in: query
        name: timeoutSeconds
        type: integer
        uniqueItems: true
      - description: |-
          Watch for changes to the described resources and return them as a stream of add, update,
          and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        type: boolean
        uniqueItems: true
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      - application/json;stream=watch
      - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.PetList'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: group.example.com
        kind: Pet
        version: v1beta1
    parameters:
    - description: |-
        object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      type: string
      uniqueItems: true
    - description: |-
        If 'true', then the output is pretty printed.
      in: query
      name: pretty
      type: string
      uniqueItems: true
    post:
      consumes:
      - '*/*'
      description: create a Pet
      operationId: createNamespacedPet
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1beta1.Pet'
      - description: |-
          When present, indicates that modifications should not be persisted. An invalid or
          unrecognized dryRun directive will result in an error response and no further processing
          of the request. Valid values are: - All: all dry run stages will be processed
        in: query
        name: dryRun
        type: string
        uniqueItems: true
      - description: |-
          fieldManager is a name associated with the actor or entity that is making these changes.
          The value must be less than or 128 characters long, and only contain printable
          characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        type: string
        uniqueItems: true
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.Pet'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1beta1.Pet'
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1beta1.Pet'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: group.example.com
        kind: Pet
        version: v1beta1
      x-codegen-request-body-name: body
  /apis/group.example.com/v1beta1/namespaces/{namespace}/pets/{name}:
    delete:
      consumes:
      - '*/*'
      description: delete a Pet
      operationId: deleteNamespacedPet
      parameters:
      - in: body
        name: body
        schema:
          $ref: 'k8s-swagger.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      - description: |-
          When present, indicates that modifications should not be persisted. An invalid or
          unrecognized dryRun directive will result in an error response and no further processing
          of the request. Valid values are: - All: all dry run stages will be processed
        in: query
        name: dryRun
        type: string
        uniqueItems: true
      - description: |-
          The duration in seconds before the object should be deleted. Value must be non-negative
          integer. The value zero indicates delete immediately. If this value is nil, the default
          grace period for the specified type will be used. Defaults to a per object value if not
          specified. zero means delete immediately.
        in: query
        name: gracePeriodSeconds
        type: integer
        uniqueItems: true
      - description: |-
          Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7.
          Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be
          added to/removed from the object''s finalizers list. Either this field or
          PropagationPolicy may be set, but not both.
        in: query
        name: orphanDependents
        type: boolean
        uniqueItems: true
      - description: |-
          Whether and how garbage collection will be performed. Either this field or
          OrphanDependents may be set, but not both. The default policy is decided by the existing
          finalizer set in the metadata.finalizers and the resource-specific default policy.
          Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the
          garbage collector to delete the dependents in the background; 'Foreground' - a cascading
          policy that deletes all dependents in the foreground.
        in: query
        name: propagationPolicy
        type: string
        uniqueItems: true
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.PetStatus'
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1beta1.PetStatus'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: group.example.com
        kind: Pet
        version: v1beta1
      x-codegen-request-body-name: body
    get:
      consumes:
      - '*/*'
      description: read the specified Pet
      operationId: readNamespacedPet
      parameters:
      - description: |-
          Should the export be exact.  Exact export maintains cluster-specific fields like
          'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        type: boolean
        uniqueItems: true
      - description: |-
          Should this value be exported.  Export strips fields that a user can not specify.
          Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        type: boolean
        uniqueItems: true
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.Pet'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: group.example.com
        kind: Pet
        version: v1beta1
    parameters:
    - description: |-
        name of the Pet
      in: path
      name: name
      required: true
      type: string
      uniqueItems: true
    - description: |-
        object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      type: string
      uniqueItems: true
    - description: |-
        If 'true', then the output is pretty printed.
      in: query
      name: pretty
      type: string
      uniqueItems: true
    patch:
      consumes:
      - application/json-patch+json
      - application/merge-patch+json
      - application/strategic-merge-patch+json
      description: partially update the specified Pet
      operationId: patchNamespacedPet
      parameters:
      - in: body
        name: body
        required: true
        schema:
          description: |-
            Patch is provided to give a concrete name and type to the Kubernetes PATCH request
            body.
          type: object
      - description: |-
          When present, indicates that modifications should not be persisted. An invalid or
          unrecognized dryRun directive will result in an error response and no further processing
          of the request. Valid values are: - All: all dry run stages will be processed
        in: query
        name: dryRun
        type: string
        uniqueItems: true
      - description: |-
          fieldManager is a name associated with the actor or entity that is making these changes.
          The value must be less than or 128 characters long, and only contain printable
          characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is
          required for apply requests (application/apply-patch) but optional for non-apply patch
          types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        type: string
        uniqueItems: true
      - description: |-
          Force is going to "force" Apply requests. It means user will re-acquire conflicting
          fields owned by other people. Force flag must be unset for non-apply patch requests.
        in: query
        name: force
        type: boolean
        uniqueItems: true
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.Pet'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: group.example.com
        kind: Pet
        version: v1beta1
      x-codegen-request-body-name: body
    put:
      consumes:
      - '*/*'
      description: replace the specified Pet
      operationId: replaceNamespacedPet
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1beta1.Pet'
      - description: |-
          When present, indicates that modifications should not be persisted. An invalid or
          unrecognized dryRun directive will result in an error response and no further processing
          of the request. Valid values are: - All: all dry run stages will be processed
        in: query
        name: dryRun
        type: string
        uniqueItems: true
      - description: |-
          fieldManager is a name associated with the actor or entity that is making these changes.
          The value must be less than or 128 characters long, and only contain printable
          characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        type: string
        uniqueItems: true
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.Pet'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1beta1.Pet'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: group.example.com
        kind: Pet
        version: v1beta1
      x-codegen-request-body-name: body
  /apis/group.example.com/v1beta1/pets:
    get:
      consumes:
      - '*/*'
      description: Returns all Pets from the system that the user has access to
      operationId: listPetsForAllNamespaces
      produces:
      - application/json
      - application/yaml
      - application/vnd.kubernetes.protobuf
      - application/json;stream=watch
      - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1beta1.PetList'
        "401":
          description: Unauthorized
      schemes:
      - https
      tags:
      - petstore_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: group.exmaple.com
        kind: Pet
        version: v1beta1beta1
    parameters:
    - description: |-
        The continue option should be set when retrieving more results from the server. Since
        this value is server defined, clients may only use the continue value from a previous
        query result with identical query parameters (except for the value of continue) and the
        server may reject a continue value it does not recognize. If the specified continue
        value is no longer valid whether due to expiration (generally five to fifteen minutes)
        or a configuration change on the server, the server will respond with a 410
        ResourceExpired error together with a continue token. If the client needs a consistent
        list, it must restart their list without the continue field. Otherwise, the client may
        send another list request with the token received with the 410 error, the server will
        respond with a list starting from the next key, but from the latest snapshot, which is
        inconsistent from the previous list results - objects that are created, modified, or
        deleted after the first list request will be included in the response, as long as their
        keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last
        resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      type: string
      uniqueItems: true
    - description: |-
        A selector to restrict the list of returned objects by their fields. Defaults to
        everything.
      in: query
      name: fieldSelector
      type: string
      uniqueItems: true
    - description: |-
        A selector to restrict the list of returned objects by their labels. Defaults to
        everything.
      in: query
      name: labelSelector
      type: string
      uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the
        server will set the `continue` field on the list metadata to a value that can be used with
        the same initial query to retrieve the next set of results. Setting a limit may return
        fewer than the requested amount of items (up to zero items) in the event all requested
        objects are filtered out and clients should only use the presence of the continue field to
        determine whether more results are available. Servers may choose not to support the limit
        argument and will return all of the available results. If limit is specified and the
        continue field is empty, clients may assume that no more results are available. This field
        is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to
        issuing a single list call without a limit - that is, no objects created, modified, or
        deleted after the first request is issued will be included in any subsequent continued
        requests. This is sometimes referred to as a consistent snapshot, and ensures that a
        client that is using limit to receive smaller chunks of a very large result can ensure
        they see all possible objects. If objects are updated during a chunked list the version of
        the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      type: integer
      uniqueItems: true
    - description: |-
        If 'true', then the output is pretty printed.
      in: query
      name: pretty
      type: string
      uniqueItems: true
    - description: |-
        When specified with a watch call, shows changes that occur after that particular version
        of a resource. Defaults to changes from the beginning of history. When specified for list:
        - if unset, then the result is returned from remote storage based on quorum-read flag; -
        if it''s 0, then we simply return what we currently have in cache, no guarantee; - if set
        to non zero, then the result is at least as fresh as given rv.
      in: query
      name: resourceVersion
      type: string
      uniqueItems: true
    - description: |-
        Timeout for the list/watch call. This limits the duration of the call, regardless of any
        activity or inactivity.
      in: query
      name: timeoutSeconds
      type: integer
      uniqueItems: true
    - description: |-
        Watch for changes to the described resources and return them as a stream of add, update,
        and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      type: boolean
      uniqueItems: true
